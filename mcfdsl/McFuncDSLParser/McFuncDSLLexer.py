# Generated from E:/python/minecraft-datapack-language/antlr/McFuncDSL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,60,445,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,
        1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,3,37,312,8,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,3,49,345,
        8,49,1,50,1,50,1,50,1,50,3,50,351,8,50,1,51,1,51,1,52,4,52,356,8,
        52,11,52,12,52,357,1,52,1,52,4,52,362,8,52,11,52,12,52,363,3,52,
        366,8,52,1,53,1,53,1,53,5,53,371,8,53,10,53,12,53,374,9,53,1,53,
        1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,386,8,54,10,54,
        12,54,389,9,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,5,57,
        400,8,57,10,57,12,57,403,9,57,1,58,4,58,406,8,58,11,58,12,58,407,
        1,58,1,58,1,59,1,59,1,59,1,59,5,59,416,8,59,10,59,12,59,419,9,59,
        1,59,1,59,1,60,1,60,5,60,425,8,60,10,60,12,60,428,9,60,1,60,1,60,
        1,61,1,61,1,61,1,61,5,61,436,8,61,10,61,12,61,439,9,61,1,61,1,61,
        1,61,1,61,1,61,1,437,0,62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
        105,53,107,54,109,55,111,0,113,0,115,56,117,57,119,58,121,59,123,
        60,1,0,9,1,0,48,57,2,0,34,34,92,92,3,0,34,34,36,36,92,92,8,0,34,
        34,36,36,92,92,98,98,102,102,110,110,114,114,116,116,4,0,10,10,13,
        13,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,458,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,115,1,0,0,0,0,117,1,
        0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,
        132,1,0,0,0,5,134,1,0,0,0,7,136,1,0,0,0,9,139,1,0,0,0,11,145,1,0,
        0,0,13,147,1,0,0,0,15,150,1,0,0,0,17,153,1,0,0,0,19,157,1,0,0,0,
        21,164,1,0,0,0,23,172,1,0,0,0,25,177,1,0,0,0,27,181,1,0,0,0,29,190,
        1,0,0,0,31,192,1,0,0,0,33,194,1,0,0,0,35,196,1,0,0,0,37,198,1,0,
        0,0,39,200,1,0,0,0,41,202,1,0,0,0,43,207,1,0,0,0,45,214,1,0,0,0,
        47,220,1,0,0,0,49,230,1,0,0,0,51,238,1,0,0,0,53,249,1,0,0,0,55,253,
        1,0,0,0,57,260,1,0,0,0,59,264,1,0,0,0,61,270,1,0,0,0,63,273,1,0,
        0,0,65,278,1,0,0,0,67,282,1,0,0,0,69,287,1,0,0,0,71,293,1,0,0,0,
        73,298,1,0,0,0,75,311,1,0,0,0,77,313,1,0,0,0,79,316,1,0,0,0,81,319,
        1,0,0,0,83,321,1,0,0,0,85,323,1,0,0,0,87,325,1,0,0,0,89,327,1,0,
        0,0,91,329,1,0,0,0,93,331,1,0,0,0,95,333,1,0,0,0,97,336,1,0,0,0,
        99,344,1,0,0,0,101,350,1,0,0,0,103,352,1,0,0,0,105,355,1,0,0,0,107,
        367,1,0,0,0,109,377,1,0,0,0,111,392,1,0,0,0,113,395,1,0,0,0,115,
        397,1,0,0,0,117,405,1,0,0,0,119,411,1,0,0,0,121,422,1,0,0,0,123,
        431,1,0,0,0,125,126,5,105,0,0,126,127,5,109,0,0,127,128,5,112,0,
        0,128,129,5,111,0,0,129,130,5,114,0,0,130,131,5,116,0,0,131,2,1,
        0,0,0,132,133,5,64,0,0,133,4,1,0,0,0,134,135,5,58,0,0,135,6,1,0,
        0,0,136,137,5,40,0,0,137,138,5,41,0,0,138,8,1,0,0,0,139,140,5,99,
        0,0,140,141,5,111,0,0,141,142,5,110,0,0,142,143,5,115,0,0,143,144,
        5,116,0,0,144,10,1,0,0,0,145,146,5,46,0,0,146,12,1,0,0,0,147,148,
        5,60,0,0,148,149,5,61,0,0,149,14,1,0,0,0,150,151,5,62,0,0,151,152,
        5,61,0,0,152,16,1,0,0,0,153,154,5,105,0,0,154,155,5,110,0,0,155,
        156,5,116,0,0,156,18,1,0,0,0,157,158,5,115,0,0,158,159,5,116,0,0,
        159,160,5,114,0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,163,5,
        103,0,0,163,20,1,0,0,0,164,165,5,98,0,0,165,166,5,111,0,0,166,167,
        5,111,0,0,167,168,5,108,0,0,168,169,5,101,0,0,169,170,5,97,0,0,170,
        171,5,110,0,0,171,22,1,0,0,0,172,173,5,118,0,0,173,174,5,111,0,0,
        174,175,5,105,0,0,175,176,5,100,0,0,176,24,1,0,0,0,177,178,5,97,
        0,0,178,179,5,110,0,0,179,180,5,121,0,0,180,26,1,0,0,0,181,182,5,
        83,0,0,182,183,5,101,0,0,183,184,5,108,0,0,184,185,5,101,0,0,185,
        186,5,99,0,0,186,187,5,116,0,0,187,188,5,111,0,0,188,189,5,114,0,
        0,189,28,1,0,0,0,190,191,5,40,0,0,191,30,1,0,0,0,192,193,5,41,0,
        0,193,32,1,0,0,0,194,195,5,123,0,0,195,34,1,0,0,0,196,197,5,125,
        0,0,197,36,1,0,0,0,198,199,5,59,0,0,199,38,1,0,0,0,200,201,5,44,
        0,0,201,40,1,0,0,0,202,203,5,102,0,0,203,204,5,117,0,0,204,205,5,
        110,0,0,205,206,5,99,0,0,206,42,1,0,0,0,207,208,5,109,0,0,208,209,
        5,101,0,0,209,210,5,116,0,0,210,211,5,104,0,0,211,212,5,111,0,0,
        212,213,5,100,0,0,213,44,1,0,0,0,214,215,5,99,0,0,215,216,5,108,
        0,0,216,217,5,97,0,0,217,218,5,115,0,0,218,219,5,115,0,0,219,46,
        1,0,0,0,220,221,5,105,0,0,221,222,5,110,0,0,222,223,5,116,0,0,223,
        224,5,101,0,0,224,225,5,114,0,0,225,226,5,102,0,0,226,227,5,97,0,
        0,227,228,5,99,0,0,228,229,5,101,0,0,229,48,1,0,0,0,230,231,5,101,
        0,0,231,232,5,120,0,0,232,233,5,116,0,0,233,234,5,101,0,0,234,235,
        5,110,0,0,235,236,5,100,0,0,236,237,5,115,0,0,237,50,1,0,0,0,238,
        239,5,105,0,0,239,240,5,109,0,0,240,241,5,112,0,0,241,242,5,108,
        0,0,242,243,5,101,0,0,243,244,5,109,0,0,244,245,5,101,0,0,245,246,
        5,110,0,0,246,247,5,116,0,0,247,248,5,115,0,0,248,52,1,0,0,0,249,
        250,5,118,0,0,250,251,5,97,0,0,251,252,5,114,0,0,252,54,1,0,0,0,
        253,254,5,114,0,0,254,255,5,101,0,0,255,256,5,116,0,0,256,257,5,
        117,0,0,257,258,5,114,0,0,258,259,5,110,0,0,259,56,1,0,0,0,260,261,
        5,102,0,0,261,262,5,111,0,0,262,263,5,114,0,0,263,58,1,0,0,0,264,
        265,5,119,0,0,265,266,5,104,0,0,266,267,5,105,0,0,267,268,5,108,
        0,0,268,269,5,101,0,0,269,60,1,0,0,0,270,271,5,105,0,0,271,272,5,
        102,0,0,272,62,1,0,0,0,273,274,5,101,0,0,274,275,5,108,0,0,275,276,
        5,115,0,0,276,277,5,101,0,0,277,64,1,0,0,0,278,279,5,110,0,0,279,
        280,5,101,0,0,280,281,5,119,0,0,281,66,1,0,0,0,282,283,5,116,0,0,
        283,284,5,114,0,0,284,285,5,117,0,0,285,286,5,101,0,0,286,68,1,0,
        0,0,287,288,5,102,0,0,288,289,5,97,0,0,289,290,5,108,0,0,290,291,
        5,115,0,0,291,292,5,101,0,0,292,70,1,0,0,0,293,294,5,110,0,0,294,
        295,5,117,0,0,295,296,5,108,0,0,296,297,5,108,0,0,297,72,1,0,0,0,
        298,299,5,105,0,0,299,300,5,110,0,0,300,74,1,0,0,0,301,302,5,99,
        0,0,302,303,5,109,0,0,303,312,5,100,0,0,304,305,5,99,0,0,305,306,
        5,111,0,0,306,307,5,109,0,0,307,308,5,109,0,0,308,309,5,97,0,0,309,
        310,5,110,0,0,310,312,5,100,0,0,311,301,1,0,0,0,311,304,1,0,0,0,
        312,76,1,0,0,0,313,314,5,45,0,0,314,315,5,62,0,0,315,78,1,0,0,0,
        316,317,5,58,0,0,317,318,5,58,0,0,318,80,1,0,0,0,319,320,5,33,0,
        0,320,82,1,0,0,0,321,322,5,42,0,0,322,84,1,0,0,0,323,324,5,47,0,
        0,324,86,1,0,0,0,325,326,5,43,0,0,326,88,1,0,0,0,327,328,5,45,0,
        0,328,90,1,0,0,0,329,330,5,62,0,0,330,92,1,0,0,0,331,332,5,60,0,
        0,332,94,1,0,0,0,333,334,5,61,0,0,334,335,5,61,0,0,335,96,1,0,0,
        0,336,337,5,33,0,0,337,338,5,61,0,0,338,98,1,0,0,0,339,340,5,38,
        0,0,340,345,5,38,0,0,341,342,5,97,0,0,342,343,5,110,0,0,343,345,
        5,100,0,0,344,339,1,0,0,0,344,341,1,0,0,0,345,100,1,0,0,0,346,347,
        5,124,0,0,347,351,5,124,0,0,348,349,5,111,0,0,349,351,5,114,0,0,
        350,346,1,0,0,0,350,348,1,0,0,0,351,102,1,0,0,0,352,353,5,61,0,0,
        353,104,1,0,0,0,354,356,7,0,0,0,355,354,1,0,0,0,356,357,1,0,0,0,
        357,355,1,0,0,0,357,358,1,0,0,0,358,365,1,0,0,0,359,361,5,46,0,0,
        360,362,7,0,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,
        363,364,1,0,0,0,364,366,1,0,0,0,365,359,1,0,0,0,365,366,1,0,0,0,
        366,106,1,0,0,0,367,372,5,34,0,0,368,371,3,111,55,0,369,371,3,113,
        56,0,370,368,1,0,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,
        0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,376,5,34,
        0,0,376,108,1,0,0,0,377,378,5,102,0,0,378,379,5,34,0,0,379,387,1,
        0,0,0,380,381,5,92,0,0,381,386,7,1,0,0,382,386,8,2,0,0,383,384,5,
        36,0,0,384,386,5,123,0,0,385,380,1,0,0,0,385,382,1,0,0,0,385,383,
        1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,390,
        1,0,0,0,389,387,1,0,0,0,390,391,5,34,0,0,391,110,1,0,0,0,392,393,
        5,92,0,0,393,394,7,3,0,0,394,112,1,0,0,0,395,396,8,4,0,0,396,114,
        1,0,0,0,397,401,7,5,0,0,398,400,7,6,0,0,399,398,1,0,0,0,400,403,
        1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,116,1,0,0,0,403,401,
        1,0,0,0,404,406,7,7,0,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,
        1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,410,6,58,0,0,410,118,
        1,0,0,0,411,412,5,47,0,0,412,413,5,47,0,0,413,417,1,0,0,0,414,416,
        8,8,0,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,417,418,
        1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,420,421,6,59,0,0,421,120,
        1,0,0,0,422,426,5,35,0,0,423,425,8,8,0,0,424,423,1,0,0,0,425,428,
        1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,
        1,0,0,0,429,430,6,60,0,0,430,122,1,0,0,0,431,432,5,47,0,0,432,433,
        5,42,0,0,433,437,1,0,0,0,434,436,9,0,0,0,435,434,1,0,0,0,436,439,
        1,0,0,0,437,438,1,0,0,0,437,435,1,0,0,0,438,440,1,0,0,0,439,437,
        1,0,0,0,440,441,5,42,0,0,441,442,5,47,0,0,442,443,1,0,0,0,443,444,
        6,61,0,0,444,124,1,0,0,0,16,0,311,344,350,357,363,365,370,372,385,
        387,401,407,417,426,437,1,6,0,0
    ]

class McFuncDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    TYPE_INT = 9
    TYPE_STRING = 10
    TYPE_BOOLEAN = 11
    TYPE_VOID = 12
    TYPE_ANY = 13
    TYPE_SELECTOR = 14
    LPAREN = 15
    RPAREN = 16
    LBRACE = 17
    RBRACE = 18
    SEMI = 19
    COMMA = 20
    FUNC = 21
    METHOD = 22
    CLASS = 23
    INTERFACE = 24
    EXTENDS = 25
    IMPLEMENTS = 26
    VAR = 27
    RETURN = 28
    FOR = 29
    WHILE = 30
    IF = 31
    ELSE = 32
    NEW = 33
    TRUE = 34
    FALSE = 35
    NULL = 36
    IN = 37
    CMD = 38
    ARROW = 39
    DOUBLE_COLON = 40
    NOT = 41
    MUL = 42
    DIV = 43
    ADD = 44
    SUB = 45
    GT = 46
    LT = 47
    EQ = 48
    NEQ = 49
    AND = 50
    OR = 51
    ASSIGN = 52
    NUMBER = 53
    STRING = 54
    FSTRING = 55
    ID = 56
    WS = 57
    LINE_COMMENT = 58
    LINE_COMMENT2 = 59
    BLOCK_COMMENT = 60

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import'", "'@'", "':'", "'()'", "'const'", "'.'", "'<='", 
            "'>='", "'int'", "'string'", "'boolean'", "'void'", "'any'", 
            "'Selector'", "'('", "')'", "'{'", "'}'", "';'", "','", "'func'", 
            "'method'", "'class'", "'interface'", "'extends'", "'implements'", 
            "'var'", "'return'", "'for'", "'while'", "'if'", "'else'", "'new'", 
            "'true'", "'false'", "'null'", "'in'", "'->'", "'::'", "'!'", 
            "'*'", "'/'", "'+'", "'-'", "'>'", "'<'", "'=='", "'!='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_INT", "TYPE_STRING", "TYPE_BOOLEAN", "TYPE_VOID", "TYPE_ANY", 
            "TYPE_SELECTOR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", 
            "COMMA", "FUNC", "METHOD", "CLASS", "INTERFACE", "EXTENDS", 
            "IMPLEMENTS", "VAR", "RETURN", "FOR", "WHILE", "IF", "ELSE", 
            "NEW", "TRUE", "FALSE", "NULL", "IN", "CMD", "ARROW", "DOUBLE_COLON", 
            "NOT", "MUL", "DIV", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", 
            "AND", "OR", "ASSIGN", "NUMBER", "STRING", "FSTRING", "ID", 
            "WS", "LINE_COMMENT", "LINE_COMMENT2", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "TYPE_INT", "TYPE_STRING", "TYPE_BOOLEAN", "TYPE_VOID", 
                  "TYPE_ANY", "TYPE_SELECTOR", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "SEMI", "COMMA", "FUNC", "METHOD", "CLASS", 
                  "INTERFACE", "EXTENDS", "IMPLEMENTS", "VAR", "RETURN", 
                  "FOR", "WHILE", "IF", "ELSE", "NEW", "TRUE", "FALSE", 
                  "NULL", "IN", "CMD", "ARROW", "DOUBLE_COLON", "NOT", "MUL", 
                  "DIV", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", "AND", "OR", 
                  "ASSIGN", "NUMBER", "STRING", "FSTRING", "ESC", "SAFE_CHAR", 
                  "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", "BLOCK_COMMENT" ]

    grammarFileName = "McFuncDSL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


