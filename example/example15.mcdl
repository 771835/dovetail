/**
 * 8×8矩阵乘法函数
 * 计算 result_matrix = matrix_a × matrix_b
 * 并格式化输出结果矩阵
 */
func matrix8x8_multiply(
    // 矩阵A的64个元素 (按行优先顺序)
    int a000, int a001, int a002, int a003, int a004, int a005, int a006, int a007,
    int a008, int a009, int a010, int a011, int a012, int a013, int a014, int a015,
    int a016, int a017, int a018, int a019, int a020, int a021, int a022, int a023,
    int a024, int a025, int a026, int a027, int a028, int a029, int a030, int a031,
    int a032, int a033, int a034, int a035, int a036, int a037, int a038, int a039,
    int a040, int a041, int a042, int a043, int a044, int a045, int a046, int a047,
    int a048, int a049, int a050, int a051, int a052, int a053, int a054, int a055,
    int a056, int a057, int a058, int a059, int a060, int a061, int a062, int a063,
    // 矩阵B的64个元素 (按行优先顺序)
    int b000, int b001, int b002, int b003, int b004, int b005, int b006, int b007,
    int b008, int b009, int b010, int b011, int b012, int b013, int b014, int b015,
    int b016, int b017, int b018, int b019, int b020, int b021, int b022, int b023,
    int b024, int b025, int b026, int b027, int b028, int b029, int b030, int b031,
    int b032, int b033, int b034, int b035, int b036, int b037, int b038, int b039,
    int b040, int b041, int b042, int b043, int b044, int b045, int b046, int b047,
    int b048, int b049, int b050, int b051, int b052, int b053, int b054, int b055,
    int b056, int b057, int b058, int b059, int b060, int b061, int b062, int b063
) {
/*
    print("开始计算8×8矩阵乘法...");
*/
    // 计算结果矩阵第0行
    int c000 = a000*b000 + a001*b008 + a002*b016 + a003*b024 + a004*b032 + a005*b040 + a006*b048 + a007*b056;
    int c001 = a000*b001 + a001*b009 + a002*b017 + a003*b025 + a004*b033 + a005*b041 + a006*b049 + a007*b057;
    int c002 = a000*b002 + a001*b010 + a002*b018 + a003*b026 + a004*b034 + a005*b042 + a006*b050 + a007*b058;
    int c003 = a000*b003 + a001*b011 + a002*b019 + a003*b027 + a004*b035 + a005*b043 + a006*b051 + a007*b059;
    int c004 = a000*b004 + a001*b012 + a002*b020 + a003*b028 + a004*b036 + a005*b044 + a006*b052 + a007*b060;
    int c005 = a000*b005 + a001*b013 + a002*b021 + a003*b029 + a004*b037 + a005*b045 + a006*b053 + a007*b061;
    int c006 = a000*b006 + a001*b014 + a002*b022 + a003*b030 + a004*b038 + a005*b046 + a006*b054 + a007*b062;
    int c007 = a000*b007 + a001*b015 + a002*b023 + a003*b031 + a004*b039 + a005*b047 + a006*b055 + a007*b063;

    // 计算结果矩阵第1行
    int c008 = a008*b000 + a009*b008 + a010*b016 + a011*b024 + a012*b032 + a013*b040 + a014*b048 + a015*b056;
    int c009 = a008*b001 + a009*b009 + a010*b017 + a011*b025 + a012*b033 + a013*b041 + a014*b049 + a015*b057;
    int c010 = a008*b002 + a009*b010 + a010*b018 + a011*b026 + a012*b034 + a013*b042 + a014*b050 + a015*b058;
    int c011 = a008*b003 + a009*b011 + a010*b019 + a011*b027 + a012*b035 + a013*b043 + a014*b051 + a015*b059;
    int c012 = a008*b004 + a009*b012 + a010*b020 + a011*b028 + a012*b036 + a013*b044 + a014*b052 + a015*b060;
    int c013 = a008*b005 + a009*b013 + a010*b021 + a011*b029 + a012*b037 + a013*b045 + a014*b053 + a015*b061;
    int c014 = a008*b006 + a009*b014 + a010*b022 + a011*b030 + a012*b038 + a013*b046 + a014*b054 + a015*b062;
    int c015 = a008*b007 + a009*b015 + a010*b023 + a011*b031 + a012*b039 + a013*b047 + a014*b055 + a015*b063;

    // 计算结果矩阵第2行
    int c016 = a016*b000 + a017*b008 + a018*b016 + a019*b024 + a020*b032 + a021*b040 + a022*b048 + a023*b056;
    int c017 = a016*b001 + a017*b009 + a018*b017 + a019*b025 + a020*b033 + a021*b041 + a022*b049 + a023*b057;
    int c018 = a016*b002 + a017*b010 + a018*b018 + a019*b026 + a020*b034 + a021*b042 + a022*b050 + a023*b058;
    int c019 = a016*b003 + a017*b011 + a018*b019 + a019*b027 + a020*b035 + a021*b043 + a022*b051 + a023*b059;
    int c020 = a016*b004 + a017*b012 + a018*b020 + a019*b028 + a020*b036 + a021*b044 + a022*b052 + a023*b060;
    int c021 = a016*b005 + a017*b013 + a018*b021 + a019*b029 + a020*b037 + a021*b045 + a022*b053 + a023*b061;
    int c022 = a016*b006 + a017*b014 + a018*b022 + a019*b030 + a020*b038 + a021*b046 + a022*b054 + a023*b062;
    int c023 = a016*b007 + a017*b015 + a018*b023 + a019*b031 + a020*b039 + a021*b047 + a022*b055 + a023*b063;

    // 计算结果矩阵第3行
    int c024 = a024*b000 + a025*b008 + a026*b016 + a027*b024 + a028*b032 + a029*b040 + a030*b048 + a031*b056;
    int c025 = a024*b001 + a025*b009 + a026*b017 + a027*b025 + a028*b033 + a029*b041 + a030*b049 + a031*b057;
    int c026 = a024*b002 + a025*b010 + a026*b018 + a027*b026 + a028*b034 + a029*b042 + a030*b050 + a031*b058;
    int c027 = a024*b003 + a025*b011 + a026*b019 + a027*b027 + a028*b035 + a029*b043 + a030*b051 + a031*b059;
    int c028 = a024*b004 + a025*b012 + a026*b020 + a027*b028 + a028*b036 + a029*b044 + a030*b052 + a031*b060;
    int c029 = a024*b005 + a025*b013 + a026*b021 + a027*b029 + a028*b037 + a029*b045 + a030*b053 + a031*b061;
    int c030 = a024*b006 + a025*b014 + a026*b022 + a027*b030 + a028*b038 + a029*b046 + a030*b054 + a031*b062;
    int c031 = a024*b007 + a025*b015 + a026*b023 + a027*b031 + a028*b039 + a029*b047 + a030*b055 + a031*b063;

    // 计算结果矩阵第4行
    int c032 = a032*b000 + a033*b008 + a034*b016 + a035*b024 + a036*b032 + a037*b040 + a038*b048 + a039*b056;
    int c033 = a032*b001 + a033*b009 + a034*b017 + a035*b025 + a036*b033 + a037*b041 + a038*b049 + a039*b057;
    int c034 = a032*b002 + a033*b010 + a034*b018 + a035*b026 + a036*b034 + a037*b042 + a038*b050 + a039*b058;
    int c035 = a032*b003 + a033*b011 + a034*b019 + a035*b027 + a036*b035 + a037*b043 + a038*b051 + a039*b059;
    int c036 = a032*b004 + a033*b012 + a034*b020 + a035*b028 + a036*b036 + a037*b044 + a038*b052 + a039*b060;
    int c037 = a032*b005 + a033*b013 + a034*b021 + a035*b029 + a036*b037 + a037*b045 + a038*b053 + a039*b061;
    int c038 = a032*b006 + a033*b014 + a034*b022 + a035*b030 + a036*b038 + a037*b046 + a038*b054 + a039*b062;
    int c039 = a032*b007 + a033*b015 + a034*b023 + a035*b031 + a036*b039 + a037*b047 + a038*b055 + a039*b063;

    // 计算结果矩阵第5行
    int c040 = a040*b000 + a041*b008 + a042*b016 + a043*b024 + a044*b032 + a045*b040 + a046*b048 + a047*b056;
    int c041 = a040*b001 + a041*b009 + a042*b017 + a043*b025 + a044*b033 + a045*b041 + a046*b049 + a047*b057;
    int c042 = a040*b002 + a041*b010 + a042*b018 + a043*b026 + a044*b034 + a045*b042 + a046*b050 + a047*b058;
    int c043 = a040*b003 + a041*b011 + a042*b019 + a043*b027 + a044*b035 + a045*b043 + a046*b051 + a047*b059;
    int c044 = a040*b004 + a041*b012 + a042*b020 + a043*b028 + a044*b036 + a045*b044 + a046*b052 + a047*b060;
    int c045 = a040*b005 + a041*b013 + a042*b021 + a043*b029 + a044*b037 + a045*b045 + a046*b053 + a047*b061;
    int c046 = a040*b006 + a041*b014 + a042*b022 + a043*b030 + a044*b038 + a045*b046 + a046*b054 + a047*b062;
    int c047 = a040*b007 + a041*b015 + a042*b023 + a043*b031 + a044*b039 + a045*b047 + a046*b055 + a047*b063;

    // 计算结果矩阵第6行
    int c048 = a048*b000 + a049*b008 + a050*b016 + a051*b024 + a052*b032 + a053*b040 + a054*b048 + a055*b056;
    int c049 = a048*b001 + a049*b009 + a050*b017 + a051*b025 + a052*b033 + a053*b041 + a054*b049 + a055*b057;
    int c050 = a048*b002 + a049*b010 + a050*b018 + a051*b026 + a052*b034 + a053*b042 + a054*b050 + a055*b058;
    int c051 = a048*b003 + a049*b011 + a050*b019 + a051*b027 + a052*b035 + a053*b043 + a054*b051 + a055*b059;
    int c052 = a048*b004 + a049*b012 + a050*b020 + a051*b028 + a052*b036 + a053*b044 + a054*b052 + a055*b060;
    int c053 = a048*b005 + a049*b013 + a050*b021 + a051*b029 + a052*b037 + a053*b045 + a054*b053 + a055*b061;
    int c054 = a048*b006 + a049*b014 + a050*b022 + a051*b030 + a052*b038 + a053*b046 + a054*b054 + a055*b062;
    int c055 = a048*b007 + a049*b015 + a050*b023 + a051*b031 + a052*b039 + a053*b047 + a054*b055 + a055*b063;

    // 计算结果矩阵第7行
    int c056 = a056*b000 + a057*b008 + a058*b016 + a059*b024 + a060*b032 + a061*b040 + a062*b048 + a063*b056;
    int c057 = a056*b001 + a057*b009 + a058*b017 + a059*b025 + a060*b033 + a061*b041 + a062*b049 + a063*b057;
    int c058 = a056*b002 + a057*b010 + a058*b018 + a059*b026 + a060*b034 + a061*b042 + a062*b050 + a063*b058;
    int c059 = a056*b003 + a057*b011 + a058*b019 + a059*b027 + a060*b035 + a061*b043 + a062*b051 + a063*b059;
    int c060 = a056*b004 + a057*b012 + a058*b020 + a059*b028 + a060*b036 + a061*b044 + a062*b052 + a063*b060;
    int c061 = a056*b005 + a057*b013 + a058*b021 + a059*b029 + a060*b037 + a061*b045 + a062*b053 + a063*b061;
    int c062 = a056*b006 + a057*b014 + a058*b022 + a059*b030 + a060*b038 + a061*b046 + a062*b054 + a063*b062;
    int c063 = a056*b007 + a057*b015 + a058*b023 + a059*b031 + a060*b039 + a061*b047 + a062*b055 + a063*b063;

    // 格式化输出结果矩阵
    print("结果矩阵 C = A × B:");
    print(f"第0行:");
    print(f"  C[0][0] = {c000}");
    print(f"  C[0][1] = {c001}");
    print(f"  C[0][2] = {c002}");
    print(f"  C[0][3] = {c003}");
    print(f"  C[0][4] = {c004}");
    print(f"  C[0][5] = {c005}");
    print(f"  C[0][6] = {c006}");
    print(f"  C[0][7] = {c007}");
    print("");
    print(f"第1行:");
    print(f"  C[1][0] = {c008}");
    print(f"  C[1][1] = {c009}");
    print(f"  C[1][2] = {c010}");
    print(f"  C[1][3] = {c011}");
    print(f"  C[1][4] = {c012}");
    print(f"  C[1][5] = {c013}");
    print(f"  C[1][6] = {c014}");
    print(f"  C[1][7] = {c015}");
    print("");
    print(f"第2行:");
    print(f"  C[2][0] = {c016}");
    print(f"  C[2][1] = {c017}");
    print(f"  C[2][2] = {c018}");
    print(f"  C[2][3] = {c019}");
    print(f"  C[2][4] = {c020}");
    print(f"  C[2][5] = {c021}");
    print(f"  C[2][6] = {c022}");
    print(f"  C[2][7] = {c023}");
    print("");
    print(f"第3行:");
    print(f"  C[3][0] = {c024}");
    print(f"  C[3][1] = {c025}");
    print(f"  C[3][2] = {c026}");
    print(f"  C[3][3] = {c027}");
    print(f"  C[3][4] = {c028}");
    print(f"  C[3][5] = {c029}");
    print(f"  C[3][6] = {c030}");
    print(f"  C[3][7] = {c031}");
    print("");
    print(f"第4行:");
    print(f"  C[4][0] = {c032}");
    print(f"  C[4][1] = {c033}");
    print(f"  C[4][2] = {c034}");
    print(f"  C[4][3] = {c035}");
    print(f"  C[4][4] = {c036}");
    print(f"  C[4][5] = {c037}");
    print(f"  C[4][6] = {c038}");
    print(f"  C[4][7] = {c039}");
    print("");
    print(f"第5行:");
    print(f"  C[5][0] = {c040}");
    print(f"  C[5][1] = {c041}");
    print(f"  C[5][2] = {c042}");
    print(f"  C[5][3] = {c043}");
    print(f"  C[5][4] = {c044}");
    print(f"  C[5][5] = {c045}");
    print(f"  C[5][6] = {c046}");
    print(f"  C[5][7] = {c047}");
    print("");
    print(f"第6行:");
    print(f"  C[6][0] = {c048}");
    print(f"  C[6][1] = {c049}");
    print(f"  C[6][2] = {c050}");
    print(f"  C[6][3] = {c051}");
    print(f"  C[6][4] = {c052}");
    print(f"  C[6][5] = {c053}");
    print(f"  C[6][6] = {c054}");
    print(f"  C[6][7] = {c055}");
    print("");
    print(f"第7行:");
    print(f"  C[7][0] = {c056}");
    print(f"  C[7][1] = {c057}");
    print(f"  C[7][2] = {c058}");
    print(f"  C[7][3] = {c059}");
    print(f"  C[7][4] = {c060}");
    print(f"  C[7][5] = {c061}");
    print(f"  C[7][6] = {c062}");
    print(f"  C[7][7] = {c063}");
    print("");
    print("矩阵乘法计算完成!");

}
// 8×8随机矩阵乘法测试
func main() {
    print("=== 8×8随机矩阵乘法测试 ===");
    print("");

    // 定义矩阵A的参数
    int a000 = 4; int a001 = 3; int a002 = 0; int a003 = 5; int a004 = 3; int a005 = 2; int a006 = 5; int a007 = 2;
    int a008 = 0; int a009 = 1; int a010 = 3; int a011 = 4; int a012 = 5; int a013 = 5; int a014 = 2; int a015 = 1;
    int a016 = 4; int a017 = 3; int a018 = 0; int a019 = 2; int a020 = 4; int a021 = 3; int a022 = 2; int a023 = 2;
    int a024 = 3; int a025 = 4; int a026 = 3; int a027 = 1; int a028 = 2; int a029 = 3; int a030 = 1; int a031 = 0;
    int a032 = 1; int a033 = 3; int a034 = 3; int a035 = 3; int a036 = 1; int a037 = 3; int a038 = 1; int a039 = 5;
    int a040 = 0; int a041 = 3; int a042 = 1; int a043 = 4; int a044 = 5; int a045 = 2; int a046 = 5; int a047 = 4;
    int a048 = 2; int a049 = 5; int a050 = 5; int a051 = 3; int a052 = 4; int a053 = 4; int a054 = 2; int a055 = 2;
    int a056 = 3; int a057 = 0; int a058 = 1; int a059 = 1; int a060 = 0; int a061 = 1; int a062 = 0; int a063 = 2;

    // 定义矩阵B的参数
    int b000 = 2; int b001 = 4; int b002 = 1; int b003 = 4; int b004 = 0; int b005 = 2; int b006 = 0; int b007 = 0;
    int b008 = 1; int b009 = 1; int b010 = 1; int b011 = 1; int b012 = 0; int b013 = 0; int b014 = 4; int b015 = 3;
    int b016 = 2; int b017 = 3; int b018 = 4; int b019 = 0; int b020 = 0; int b021 = 4; int b022 = 1; int b023 = 1;
    int b024 = 1; int b025 = 5; int b026 = 3; int b027 = 2; int b028 = 2; int b029 = 5; int b030 = 1; int b031 = 3;
    int b032 = 4; int b033 = 2; int b034 = 5; int b035 = 5; int b036 = 2; int b037 = 3; int b038 = 0; int b039 = 4;
    int b040 = 5; int b041 = 2; int b042 = 5; int b043 = 1; int b044 = 4; int b045 = 3; int b046 = 1; int b047 = 3;
    int b048 = 0; int b049 = 3; int b050 = 1; int b051 = 0; int b052 = 3; int b053 = 0; int b054 = 2; int b055 = 1;
    int b056 = 2; int b057 = 5; int b058 = 2; int b059 = 4; int b060 = 2; int b061 = 5; int b062 = 0; int b063 = 1;

    // 调用矩阵乘法函数
    matrix8x8_multiply(
        a000, a001, a002, a003, a004, a005, a006, a007,
        a008, a009, a010, a011, a012, a013, a014, a015,
        a016, a017, a018, a019, a020, a021, a022, a023,
        a024, a025, a026, a027, a028, a029, a030, a031,
        a032, a033, a034, a035, a036, a037, a038, a039,
        a040, a041, a042, a043, a044, a045, a046, a047,
        a048, a049, a050, a051, a052, a053, a054, a055,
        a056, a057, a058, a059, a060, a061, a062, a063,
        // 矩阵B参数
        b000, b001, b002, b003, b004, b005, b006, b007,
        b008, b009, b010, b011, b012, b013, b014, b015,
        b016, b017, b018, b019, b020, b021, b022, b023,
        b024, b025, b026, b027, b028, b029, b030, b031,
        b032, b033, b034, b035, b036, b037, b038, b039,
        b040, b041, b042, b043, b044, b045, b046, b047,
        b048, b049, b050, b051, b052, b053, b054, b055,
        b056, b057, b058, b059, b060, b061, b062, b063
    );
}