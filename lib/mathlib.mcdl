// mathlib.mcdl - 简单的数学工具库
include "math"
/**
 * 计算并返回第 n 项斐波那契数（非递归方式）
 */
func fibonacci(n: int) -> int {
    if (n <= 1) {
        return n;
    }

    let prev2 = 0;
    let prev1 = 1;
    let current = 0;

    for (i : int = 2 ; i <= n; i= i+1 ) {
        current = prev1 + prev2;
        prev2 = prev1;
        prev1 = current;
    }

    return current;
}

/**
 * 计算给定数的阶乘（假设输入为非负整数）
 */
func factorial(n: int) -> int {
    if (n <= 1) {
        return 1;
    }

    let result = 1;
    for (i: int = 2; i <= n; i= i+1) {
        result = result * i;
    }

    return result;
}

/**
 * 快速幂函数 (base^exp) 返回 base 的 exp 次幂（非负指数）
 */
func pow(base: int, exp: int) -> int {
    if (exp < 0) {
        return 0; // 假设我们不处理分数
    }

    let result = 1;
    let currentBase = base;

    for (; exp > 0;) {
        if (exp % 2 == 1) {
            result = result * currentBase;
        }
        currentBase = currentBase * currentBase;
        exp = exp / 2;
    }

    return result;
}

/**
 * 计算两个整数的最大公约数（欧几里得算法）
 */
func gcd(a: int, b: int) -> int {
    while (b != 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

/**
 * 计算两个整数的最小公倍数
 */
func lcm(a: int, b: int) -> int {
    return (a * b) / gcd(a, b);
}

/**
 * 计算数字的位数
 */
func digit_count(n: int) -> int {
    if (n == 0) {
        return 1;
    }

    let absN = abs(n);
    let count = 0;

    while (absN > 0) {
        count = count + 1;
        absN = absN / 10;
    }

    return count;
}

/**
 * 反转一个整数的数字
 */
func reverse_number(n: int) -> int {
    let absN = abs(n);
    let isNegative = n < 0;
    let result = 0;

    while (absN > 0) {
        result = result * 10 + absN % 10;
        absN = absN / 10;
    }

    if (isNegative) {
        result = -result;
    }

    return result;
}
/**
 * 计算给定整数 x 的整数平方根（向下取整）
 * 使用双曲近似 + 牛顿迭代法优化，适用于 32 位整数范围内的输入
 *
 * 算法来自：https://github.com/Triton365/fast_integer_sqrt
 * 感谢 Triton365 提供的高效整数平方根近似方法。
 *
 * 参数:
 *   x - 要计算平方根的非负整数（0 <= x <= 2147483647）
 *
 * 返回值:
 *   返回 x 的整数平方根（即 floor(sqrt(x))）
 */
func sqrt(int x): int {
    int res = 0

    if (0 <= x and x <= 19310) {
        res = -594039 / (x + 4095) + 149
    }
    else if (19311 <= x and x <= 1705544)  {
        res = -1568669636 / (x + 903167) + 1857
    }
    else if (1705545 <= x and x <= 39400514) {
        res = -2147483648 / (x / 141 + 224767) + 10425
    }
    else if (39400515 <= x and x <= 455779650) {
        res = -2147483648 / (x / 7775 + 60419) + 39184
    }
    else if (455779651 <= x and x <= 2147483647) {
        res = -2147483648 / (x / 100000 + 26111) + 91181
    }

    res = (res + x / res) / 2

    if (res > x / res) {
        res=res - 1
    }
    return res
}
/**
 * 判断一个整数是否为质数（素数）
 *
 * 参数:
 *   x - 待判断的整数
 *
 * 返回值:
 *   true 表示是质数，false 表示不是质数
 *
 * 实现说明：
 *   - 小于 2 的数不是质数
 *   - 对于大于等于 2 的数，只需检查到 sqrt(x) 即可
 *   - 若存在能整除 x 的因数，则不是质数
 */
func is_prime(int x): boolean {
    if (x < 2) {
        return false
    }

    int sqrt_x = sqrt(x)
    for (int i = 2; i <= sqrt_x; i=i+1) {
        if (x % i == 0) {
            return false
        }
    }

    return true
}