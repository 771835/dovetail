// mathlib.mcdl - 简单的数学工具库

/**
 * 返回一个整数的绝对值
 */
func abs(x: int) -> int {
    if (x < 0) {
        return -x;
    }
    return x;
}

/**
 * 计算并返回第 n 项斐波那契数（非递归方式）
 */
func fibonacci(n: int) -> int {
    if (n <= 1) {
        return n;
    }

    let prev2 = 0;
    let prev1 = 1;
    let current = 0;

    for (i : int = 2 ; i <= n; i= i+1 ) {
        current = prev1 + prev2;
        prev2 = prev1;
        prev1 = current;
    }

    return current;
}

/**
 * 计算给定数的阶乘（假设输入为非负整数）
 */
func factorial(n: int) -> int {
    if (n <= 1) {
        return 1;
    }

    let result = 1;
    for (i: int = 2; i <= n; i= i+1) {
        result = result * i;
    }

    return result;
}

/**
 * 快速幂函数 (base^exp) 返回 base 的 exp 次幂（非负指数）
 */
func pow(base: int, exp: int) -> int {
    if (exp < 0) {
        return 0; // 假设我们不处理分数
    }

    let result = 1;
    let currentBase = base;

    for (; exp > 0;) {
        if (exp % 2 == 1) {
            result = result * currentBase;
        }
        currentBase = currentBase * currentBase;
        exp = exp / 2;
    }

    return result;
}

/**
 * 计算两个整数的最大公约数（欧几里得算法）
 */
func gcd(a: int, b: int) -> int {
    while (b != 0) {
        let temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

/**
 * 计算两个整数的最小公倍数
 */
func lcm(a: int, b: int) -> int {
    return (a * b) / gcd(a, b);
}

/**
 * 计算数字的位数
 */
func digit_count(n: int) -> int {
    if (n == 0) {
        return 1;
    }

    let absN = abs(n);
    let count = 0;

    while (absN > 0) {
        count = count + 1;
        absN = absN / 10;
    }

    return count;
}

/**
 * 反转一个整数的数字
 */
func reverse_number(n: int) -> int {
    let absN = abs(n);
    let isNegative = n < 0;
    let result = 0;

    while (absN > 0) {
        result = result * 10 + absN % 10;
        absN = absN / 10;
    }

    if (isNegative) {
        result = -result;
    }

    return result;
}
