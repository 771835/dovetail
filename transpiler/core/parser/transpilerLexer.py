# Generated from E:/python/minecraft-datapack-language/antlr/transpiler.g4 by ANTLR 4.13.2
import sys

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,417,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,
        1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
        1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,
        1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,3,47,317,
        8,47,1,48,1,48,1,48,1,48,3,48,323,8,48,1,49,1,49,1,50,4,50,328,8,
        50,11,50,12,50,329,1,50,1,50,4,50,334,8,50,11,50,12,50,335,3,50,
        338,8,50,1,51,1,51,1,51,5,51,343,8,51,10,51,12,51,346,9,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,358,8,52,10,52,
        12,52,361,9,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,5,55,
        372,8,55,10,55,12,55,375,9,55,1,56,4,56,378,8,56,11,56,12,56,379,
        1,56,1,56,1,57,1,57,1,57,1,57,5,57,388,8,57,10,57,12,57,391,9,57,
        1,57,1,57,1,58,1,58,5,58,397,8,58,10,58,12,58,400,9,58,1,58,1,58,
        1,59,1,59,1,59,1,59,5,59,408,8,59,10,59,12,59,411,9,59,1,59,1,59,
        1,59,1,59,1,59,1,409,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
        105,53,107,0,109,0,111,54,113,55,115,56,117,57,119,58,1,0,9,1,0,
        48,57,2,0,34,34,92,92,3,0,34,34,36,36,92,92,8,0,34,34,36,36,92,92,
        98,98,102,102,110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,
        13,32,32,2,0,10,10,13,13,429,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
        0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
        1,0,0,0,1,121,1,0,0,0,3,123,1,0,0,0,5,125,1,0,0,0,7,130,1,0,0,0,
        9,132,1,0,0,0,11,134,1,0,0,0,13,137,1,0,0,0,15,139,1,0,0,0,17,141,
        1,0,0,0,19,143,1,0,0,0,21,145,1,0,0,0,23,147,1,0,0,0,25,149,1,0,
        0,0,27,157,1,0,0,0,29,162,1,0,0,0,31,169,1,0,0,0,33,175,1,0,0,0,
        35,185,1,0,0,0,37,193,1,0,0,0,39,204,1,0,0,0,41,208,1,0,0,0,43,214,
        1,0,0,0,45,221,1,0,0,0,47,225,1,0,0,0,49,231,1,0,0,0,51,234,1,0,
        0,0,53,239,1,0,0,0,55,243,1,0,0,0,57,248,1,0,0,0,59,254,1,0,0,0,
        61,259,1,0,0,0,63,262,1,0,0,0,65,268,1,0,0,0,67,277,1,0,0,0,69,280,
        1,0,0,0,71,283,1,0,0,0,73,285,1,0,0,0,75,287,1,0,0,0,77,289,1,0,
        0,0,79,291,1,0,0,0,81,293,1,0,0,0,83,295,1,0,0,0,85,297,1,0,0,0,
        87,299,1,0,0,0,89,302,1,0,0,0,91,305,1,0,0,0,93,308,1,0,0,0,95,316,
        1,0,0,0,97,322,1,0,0,0,99,324,1,0,0,0,101,327,1,0,0,0,103,339,1,
        0,0,0,105,349,1,0,0,0,107,364,1,0,0,0,109,367,1,0,0,0,111,369,1,
        0,0,0,113,377,1,0,0,0,115,383,1,0,0,0,117,394,1,0,0,0,119,403,1,
        0,0,0,121,122,5,64,0,0,122,2,1,0,0,0,123,124,5,58,0,0,124,4,1,0,
        0,0,125,126,5,102,0,0,126,127,5,117,0,0,127,128,5,99,0,0,128,129,
        5,107,0,0,129,6,1,0,0,0,130,131,5,63,0,0,131,8,1,0,0,0,132,133,5,
        46,0,0,133,10,1,0,0,0,134,135,5,40,0,0,135,136,5,41,0,0,136,12,1,
        0,0,0,137,138,5,40,0,0,138,14,1,0,0,0,139,140,5,41,0,0,140,16,1,
        0,0,0,141,142,5,123,0,0,142,18,1,0,0,0,143,144,5,125,0,0,144,20,
        1,0,0,0,145,146,5,59,0,0,146,22,1,0,0,0,147,148,5,44,0,0,148,24,
        1,0,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,99,0,0,152,
        153,5,108,0,0,153,154,5,117,0,0,154,155,5,100,0,0,155,156,5,101,
        0,0,156,26,1,0,0,0,157,158,5,102,0,0,158,159,5,117,0,0,159,160,5,
        110,0,0,160,161,5,99,0,0,161,28,1,0,0,0,162,163,5,109,0,0,163,164,
        5,101,0,0,164,165,5,116,0,0,165,166,5,104,0,0,166,167,5,111,0,0,
        167,168,5,100,0,0,168,30,1,0,0,0,169,170,5,99,0,0,170,171,5,108,
        0,0,171,172,5,97,0,0,172,173,5,115,0,0,173,174,5,115,0,0,174,32,
        1,0,0,0,175,176,5,105,0,0,176,177,5,110,0,0,177,178,5,116,0,0,178,
        179,5,101,0,0,179,180,5,114,0,0,180,181,5,102,0,0,181,182,5,97,0,
        0,182,183,5,99,0,0,183,184,5,101,0,0,184,34,1,0,0,0,185,186,5,101,
        0,0,186,187,5,120,0,0,187,188,5,116,0,0,188,189,5,101,0,0,189,190,
        5,110,0,0,190,191,5,100,0,0,191,192,5,115,0,0,192,36,1,0,0,0,193,
        194,5,105,0,0,194,195,5,109,0,0,195,196,5,112,0,0,196,197,5,108,
        0,0,197,198,5,101,0,0,198,199,5,109,0,0,199,200,5,101,0,0,200,201,
        5,110,0,0,201,202,5,116,0,0,202,203,5,115,0,0,203,38,1,0,0,0,204,
        205,5,118,0,0,205,206,5,97,0,0,206,207,5,114,0,0,207,40,1,0,0,0,
        208,209,5,99,0,0,209,210,5,111,0,0,210,211,5,110,0,0,211,212,5,115,
        0,0,212,213,5,116,0,0,213,42,1,0,0,0,214,215,5,114,0,0,215,216,5,
        101,0,0,216,217,5,116,0,0,217,218,5,117,0,0,218,219,5,114,0,0,219,
        220,5,110,0,0,220,44,1,0,0,0,221,222,5,102,0,0,222,223,5,111,0,0,
        223,224,5,114,0,0,224,46,1,0,0,0,225,226,5,119,0,0,226,227,5,104,
        0,0,227,228,5,105,0,0,228,229,5,108,0,0,229,230,5,101,0,0,230,48,
        1,0,0,0,231,232,5,105,0,0,232,233,5,102,0,0,233,50,1,0,0,0,234,235,
        5,101,0,0,235,236,5,108,0,0,236,237,5,115,0,0,237,238,5,101,0,0,
        238,52,1,0,0,0,239,240,5,110,0,0,240,241,5,101,0,0,241,242,5,119,
        0,0,242,54,1,0,0,0,243,244,5,116,0,0,244,245,5,114,0,0,245,246,5,
        117,0,0,246,247,5,101,0,0,247,56,1,0,0,0,248,249,5,102,0,0,249,250,
        5,97,0,0,250,251,5,108,0,0,251,252,5,115,0,0,252,253,5,101,0,0,253,
        58,1,0,0,0,254,255,5,110,0,0,255,256,5,117,0,0,256,257,5,108,0,0,
        257,258,5,108,0,0,258,60,1,0,0,0,259,260,5,105,0,0,260,261,5,110,
        0,0,261,62,1,0,0,0,262,263,5,98,0,0,263,264,5,114,0,0,264,265,5,
        101,0,0,265,266,5,97,0,0,266,267,5,107,0,0,267,64,1,0,0,0,268,269,
        5,99,0,0,269,270,5,111,0,0,270,271,5,110,0,0,271,272,5,116,0,0,272,
        273,5,105,0,0,273,274,5,110,0,0,274,275,5,117,0,0,275,276,5,101,
        0,0,276,66,1,0,0,0,277,278,5,45,0,0,278,279,5,62,0,0,279,68,1,0,
        0,0,280,281,5,58,0,0,281,282,5,58,0,0,282,70,1,0,0,0,283,284,5,33,
        0,0,284,72,1,0,0,0,285,286,5,42,0,0,286,74,1,0,0,0,287,288,5,47,
        0,0,288,76,1,0,0,0,289,290,5,37,0,0,290,78,1,0,0,0,291,292,5,43,
        0,0,292,80,1,0,0,0,293,294,5,45,0,0,294,82,1,0,0,0,295,296,5,62,
        0,0,296,84,1,0,0,0,297,298,5,60,0,0,298,86,1,0,0,0,299,300,5,61,
        0,0,300,301,5,61,0,0,301,88,1,0,0,0,302,303,5,33,0,0,303,304,5,61,
        0,0,304,90,1,0,0,0,305,306,5,62,0,0,306,307,5,61,0,0,307,92,1,0,
        0,0,308,309,5,60,0,0,309,310,5,61,0,0,310,94,1,0,0,0,311,312,5,38,
        0,0,312,317,5,38,0,0,313,314,5,97,0,0,314,315,5,110,0,0,315,317,
        5,100,0,0,316,311,1,0,0,0,316,313,1,0,0,0,317,96,1,0,0,0,318,319,
        5,124,0,0,319,323,5,124,0,0,320,321,5,111,0,0,321,323,5,114,0,0,
        322,318,1,0,0,0,322,320,1,0,0,0,323,98,1,0,0,0,324,325,5,61,0,0,
        325,100,1,0,0,0,326,328,7,0,0,0,327,326,1,0,0,0,328,329,1,0,0,0,
        329,327,1,0,0,0,329,330,1,0,0,0,330,337,1,0,0,0,331,333,5,46,0,0,
        332,334,7,0,0,0,333,332,1,0,0,0,334,335,1,0,0,0,335,333,1,0,0,0,
        335,336,1,0,0,0,336,338,1,0,0,0,337,331,1,0,0,0,337,338,1,0,0,0,
        338,102,1,0,0,0,339,344,5,34,0,0,340,343,3,107,53,0,341,343,3,109,
        54,0,342,340,1,0,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,
        0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,5,34,
        0,0,348,104,1,0,0,0,349,350,5,102,0,0,350,351,5,34,0,0,351,359,1,
        0,0,0,352,353,5,92,0,0,353,358,7,1,0,0,354,358,8,2,0,0,355,356,5,
        36,0,0,356,358,5,123,0,0,357,352,1,0,0,0,357,354,1,0,0,0,357,355,
        1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,362,
        1,0,0,0,361,359,1,0,0,0,362,363,5,34,0,0,363,106,1,0,0,0,364,365,
        5,92,0,0,365,366,7,3,0,0,366,108,1,0,0,0,367,368,8,4,0,0,368,110,
        1,0,0,0,369,373,7,5,0,0,370,372,7,6,0,0,371,370,1,0,0,0,372,375,
        1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,112,1,0,0,0,375,373,
        1,0,0,0,376,378,7,7,0,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,
        1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,6,56,0,0,382,114,
        1,0,0,0,383,384,5,47,0,0,384,385,5,47,0,0,385,389,1,0,0,0,386,388,
        8,8,0,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,
        1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,393,6,57,0,0,393,116,
        1,0,0,0,394,398,5,35,0,0,395,397,8,8,0,0,396,395,1,0,0,0,397,400,
        1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,
        1,0,0,0,401,402,6,58,0,0,402,118,1,0,0,0,403,404,5,47,0,0,404,405,
        5,42,0,0,405,409,1,0,0,0,406,408,9,0,0,0,407,406,1,0,0,0,408,411,
        1,0,0,0,409,410,1,0,0,0,409,407,1,0,0,0,410,412,1,0,0,0,411,409,
        1,0,0,0,412,413,5,42,0,0,413,414,5,47,0,0,414,415,1,0,0,0,415,416,
        6,59,0,0,416,120,1,0,0,0,15,0,316,322,329,335,337,342,344,357,359,
        373,379,389,398,409,1,6,0,0
    ]

class transpilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    PAREN = 6
    LPAREN = 7
    RPAREN = 8
    LBRACE = 9
    RBRACE = 10
    SEMI = 11
    COMMA = 12
    INCLUDE = 13
    FUNC = 14
    METHOD = 15
    CLASS = 16
    INTERFACE = 17
    EXTENDS = 18
    IMPLEMENTS = 19
    VAR = 20
    CONST = 21
    RETURN = 22
    FOR = 23
    WHILE = 24
    IF = 25
    ELSE = 26
    NEW = 27
    TRUE = 28
    FALSE = 29
    NULL = 30
    IN = 31
    BREAK = 32
    CONTINUE = 33
    ARROW = 34
    DOUBLE_COLON = 35
    NOT = 36
    MUL = 37
    DIV = 38
    MOD = 39
    ADD = 40
    SUB = 41
    GT = 42
    LT = 43
    EQ = 44
    NEQ = 45
    GTE = 46
    LTE = 47
    AND = 48
    OR = 49
    ASSIGN = 50
    NUMBER = 51
    STRING = 52
    FSTRING = 53
    ID = 54
    WS = 55
    LINE_COMMENT = 56
    LINE_COMMENT2 = 57
    BLOCK_COMMENT = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "':'", "'fuck'", "'?'", "'.'", "'()'", "'('", "')'", 
            "'{'", "'}'", "';'", "','", "'include'", "'func'", "'method'", 
            "'class'", "'interface'", "'extends'", "'implements'", "'var'", 
            "'const'", "'return'", "'for'", "'while'", "'if'", "'else'", 
            "'new'", "'true'", "'false'", "'null'", "'in'", "'break'", "'continue'", 
            "'->'", "'::'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'>'", 
            "'<'", "'=='", "'!='", "'>='", "'<='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "PAREN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", 
            "INCLUDE", "FUNC", "METHOD", "CLASS", "INTERFACE", "EXTENDS", 
            "IMPLEMENTS", "VAR", "CONST", "RETURN", "FOR", "WHILE", "IF", 
            "ELSE", "NEW", "TRUE", "FALSE", "NULL", "IN", "BREAK", "CONTINUE", 
            "ARROW", "DOUBLE_COLON", "NOT", "MUL", "DIV", "MOD", "ADD", 
            "SUB", "GT", "LT", "EQ", "NEQ", "GTE", "LTE", "AND", "OR", "ASSIGN", 
            "NUMBER", "STRING", "FSTRING", "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", 
            "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "PAREN", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", "INCLUDE", 
                  "FUNC", "METHOD", "CLASS", "INTERFACE", "EXTENDS", "IMPLEMENTS", 
                  "VAR", "CONST", "RETURN", "FOR", "WHILE", "IF", "ELSE", 
                  "NEW", "TRUE", "FALSE", "NULL", "IN", "BREAK", "CONTINUE", 
                  "ARROW", "DOUBLE_COLON", "NOT", "MUL", "DIV", "MOD", "ADD", 
                  "SUB", "GT", "LT", "EQ", "NEQ", "GTE", "LTE", "AND", "OR", 
                  "ASSIGN", "NUMBER", "STRING", "FSTRING", "ESC", "SAFE_CHAR", 
                  "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", "BLOCK_COMMENT" ]

    grammarFileName = "transpiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


