# Generated from E:/python/minecraft-datapack-language/antlr/transpiler.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,57,418,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,3,12,153,8,12,1,13,1,13,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,285,8,34,1,35,1,35,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
        46,1,46,3,46,318,8,46,1,47,1,47,1,47,1,47,3,47,324,8,47,1,48,1,48,
        1,49,4,49,329,8,49,11,49,12,49,330,1,49,1,49,4,49,335,8,49,11,49,
        12,49,336,3,49,339,8,49,1,50,1,50,1,50,5,50,344,8,50,10,50,12,50,
        347,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,
        359,8,51,10,51,12,51,362,9,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,
        1,54,1,54,5,54,373,8,54,10,54,12,54,376,9,54,1,55,4,55,379,8,55,
        11,55,12,55,380,1,55,1,55,1,56,1,56,1,56,1,56,5,56,389,8,56,10,56,
        12,56,392,9,56,1,56,1,56,1,57,1,57,5,57,398,8,57,10,57,12,57,401,
        9,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,409,8,58,10,58,12,58,412,
        9,58,1,58,1,58,1,58,1,58,1,58,1,410,0,59,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,51,103,52,105,0,107,0,109,53,111,54,113,55,115,56,117,57,1,0,
        9,1,0,48,57,2,0,34,34,92,92,3,0,34,34,36,36,92,92,8,0,34,34,36,36,
        92,92,98,98,102,102,110,110,114,114,116,116,4,0,10,10,13,13,34,34,
        92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
        10,13,13,32,32,2,0,10,10,13,13,433,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
        1,119,1,0,0,0,3,121,1,0,0,0,5,123,1,0,0,0,7,126,1,0,0,0,9,128,1,
        0,0,0,11,130,1,0,0,0,13,132,1,0,0,0,15,134,1,0,0,0,17,136,1,0,0,
        0,19,138,1,0,0,0,21,140,1,0,0,0,23,142,1,0,0,0,25,152,1,0,0,0,27,
        154,1,0,0,0,29,156,1,0,0,0,31,159,1,0,0,0,33,167,1,0,0,0,35,172,
        1,0,0,0,37,179,1,0,0,0,39,185,1,0,0,0,41,195,1,0,0,0,43,203,1,0,
        0,0,45,214,1,0,0,0,47,220,1,0,0,0,49,224,1,0,0,0,51,231,1,0,0,0,
        53,235,1,0,0,0,55,241,1,0,0,0,57,244,1,0,0,0,59,249,1,0,0,0,61,254,
        1,0,0,0,63,260,1,0,0,0,65,265,1,0,0,0,67,271,1,0,0,0,69,284,1,0,
        0,0,71,286,1,0,0,0,73,288,1,0,0,0,75,290,1,0,0,0,77,292,1,0,0,0,
        79,294,1,0,0,0,81,296,1,0,0,0,83,298,1,0,0,0,85,300,1,0,0,0,87,303,
        1,0,0,0,89,306,1,0,0,0,91,309,1,0,0,0,93,317,1,0,0,0,95,323,1,0,
        0,0,97,325,1,0,0,0,99,328,1,0,0,0,101,340,1,0,0,0,103,350,1,0,0,
        0,105,365,1,0,0,0,107,368,1,0,0,0,109,370,1,0,0,0,111,378,1,0,0,
        0,113,384,1,0,0,0,115,395,1,0,0,0,117,404,1,0,0,0,119,120,5,64,0,
        0,120,2,1,0,0,0,121,122,5,46,0,0,122,4,1,0,0,0,123,124,5,40,0,0,
        124,125,5,41,0,0,125,6,1,0,0,0,126,127,5,40,0,0,127,8,1,0,0,0,128,
        129,5,41,0,0,129,10,1,0,0,0,130,131,5,91,0,0,131,12,1,0,0,0,132,
        133,5,93,0,0,133,14,1,0,0,0,134,135,5,123,0,0,135,16,1,0,0,0,136,
        137,5,125,0,0,137,18,1,0,0,0,138,139,5,59,0,0,139,20,1,0,0,0,140,
        141,5,44,0,0,141,22,1,0,0,0,142,143,5,63,0,0,143,24,1,0,0,0,144,
        145,5,45,0,0,145,153,5,62,0,0,146,147,5,102,0,0,147,148,5,117,0,
        0,148,149,5,99,0,0,149,153,5,107,0,0,150,151,5,97,0,0,151,153,5,
        115,0,0,152,144,1,0,0,0,152,146,1,0,0,0,152,150,1,0,0,0,153,26,1,
        0,0,0,154,155,5,58,0,0,155,28,1,0,0,0,156,157,5,58,0,0,157,158,5,
        58,0,0,158,30,1,0,0,0,159,160,5,105,0,0,160,161,5,110,0,0,161,162,
        5,99,0,0,162,163,5,108,0,0,163,164,5,117,0,0,164,165,5,100,0,0,165,
        166,5,101,0,0,166,32,1,0,0,0,167,168,5,102,0,0,168,169,5,117,0,0,
        169,170,5,110,0,0,170,171,5,99,0,0,171,34,1,0,0,0,172,173,5,109,
        0,0,173,174,5,101,0,0,174,175,5,116,0,0,175,176,5,104,0,0,176,177,
        5,111,0,0,177,178,5,100,0,0,178,36,1,0,0,0,179,180,5,99,0,0,180,
        181,5,108,0,0,181,182,5,97,0,0,182,183,5,115,0,0,183,184,5,115,0,
        0,184,38,1,0,0,0,185,186,5,105,0,0,186,187,5,110,0,0,187,188,5,116,
        0,0,188,189,5,101,0,0,189,190,5,114,0,0,190,191,5,102,0,0,191,192,
        5,97,0,0,192,193,5,99,0,0,193,194,5,101,0,0,194,40,1,0,0,0,195,196,
        5,101,0,0,196,197,5,120,0,0,197,198,5,116,0,0,198,199,5,101,0,0,
        199,200,5,110,0,0,200,201,5,100,0,0,201,202,5,115,0,0,202,42,1,0,
        0,0,203,204,5,105,0,0,204,205,5,109,0,0,205,206,5,112,0,0,206,207,
        5,108,0,0,207,208,5,101,0,0,208,209,5,109,0,0,209,210,5,101,0,0,
        210,211,5,110,0,0,211,212,5,116,0,0,212,213,5,115,0,0,213,44,1,0,
        0,0,214,215,5,99,0,0,215,216,5,111,0,0,216,217,5,110,0,0,217,218,
        5,115,0,0,218,219,5,116,0,0,219,46,1,0,0,0,220,221,5,108,0,0,221,
        222,5,101,0,0,222,223,5,116,0,0,223,48,1,0,0,0,224,225,5,114,0,0,
        225,226,5,101,0,0,226,227,5,116,0,0,227,228,5,117,0,0,228,229,5,
        114,0,0,229,230,5,110,0,0,230,50,1,0,0,0,231,232,5,102,0,0,232,233,
        5,111,0,0,233,234,5,114,0,0,234,52,1,0,0,0,235,236,5,119,0,0,236,
        237,5,104,0,0,237,238,5,105,0,0,238,239,5,108,0,0,239,240,5,101,
        0,0,240,54,1,0,0,0,241,242,5,105,0,0,242,243,5,102,0,0,243,56,1,
        0,0,0,244,245,5,101,0,0,245,246,5,108,0,0,246,247,5,115,0,0,247,
        248,5,101,0,0,248,58,1,0,0,0,249,250,5,116,0,0,250,251,5,114,0,0,
        251,252,5,117,0,0,252,253,5,101,0,0,253,60,1,0,0,0,254,255,5,102,
        0,0,255,256,5,97,0,0,256,257,5,108,0,0,257,258,5,115,0,0,258,259,
        5,101,0,0,259,62,1,0,0,0,260,261,5,110,0,0,261,262,5,117,0,0,262,
        263,5,108,0,0,263,264,5,108,0,0,264,64,1,0,0,0,265,266,5,98,0,0,
        266,267,5,114,0,0,267,268,5,101,0,0,268,269,5,97,0,0,269,270,5,107,
        0,0,270,66,1,0,0,0,271,272,5,99,0,0,272,273,5,111,0,0,273,274,5,
        110,0,0,274,275,5,116,0,0,275,276,5,105,0,0,276,277,5,110,0,0,277,
        278,5,117,0,0,278,279,5,101,0,0,279,68,1,0,0,0,280,285,5,33,0,0,
        281,282,5,110,0,0,282,283,5,111,0,0,283,285,5,116,0,0,284,280,1,
        0,0,0,284,281,1,0,0,0,285,70,1,0,0,0,286,287,5,42,0,0,287,72,1,0,
        0,0,288,289,5,47,0,0,289,74,1,0,0,0,290,291,5,37,0,0,291,76,1,0,
        0,0,292,293,5,43,0,0,293,78,1,0,0,0,294,295,5,45,0,0,295,80,1,0,
        0,0,296,297,5,62,0,0,297,82,1,0,0,0,298,299,5,60,0,0,299,84,1,0,
        0,0,300,301,5,61,0,0,301,302,5,61,0,0,302,86,1,0,0,0,303,304,5,33,
        0,0,304,305,5,61,0,0,305,88,1,0,0,0,306,307,5,62,0,0,307,308,5,61,
        0,0,308,90,1,0,0,0,309,310,5,60,0,0,310,311,5,61,0,0,311,92,1,0,
        0,0,312,313,5,38,0,0,313,318,5,38,0,0,314,315,5,97,0,0,315,316,5,
        110,0,0,316,318,5,100,0,0,317,312,1,0,0,0,317,314,1,0,0,0,318,94,
        1,0,0,0,319,320,5,124,0,0,320,324,5,124,0,0,321,322,5,111,0,0,322,
        324,5,114,0,0,323,319,1,0,0,0,323,321,1,0,0,0,324,96,1,0,0,0,325,
        326,5,61,0,0,326,98,1,0,0,0,327,329,7,0,0,0,328,327,1,0,0,0,329,
        330,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,338,1,0,0,0,332,
        334,5,46,0,0,333,335,7,0,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,
        334,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,332,1,0,0,0,338,
        339,1,0,0,0,339,100,1,0,0,0,340,345,5,34,0,0,341,344,3,105,52,0,
        342,344,3,107,53,0,343,341,1,0,0,0,343,342,1,0,0,0,344,347,1,0,0,
        0,345,343,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,
        0,348,349,5,34,0,0,349,102,1,0,0,0,350,351,5,102,0,0,351,352,5,34,
        0,0,352,360,1,0,0,0,353,354,5,92,0,0,354,359,7,1,0,0,355,359,8,2,
        0,0,356,357,5,36,0,0,357,359,5,123,0,0,358,353,1,0,0,0,358,355,1,
        0,0,0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,
        0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,364,5,34,0,0,364,104,1,
        0,0,0,365,366,5,92,0,0,366,367,7,3,0,0,367,106,1,0,0,0,368,369,8,
        4,0,0,369,108,1,0,0,0,370,374,7,5,0,0,371,373,7,6,0,0,372,371,1,
        0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,110,1,
        0,0,0,376,374,1,0,0,0,377,379,7,7,0,0,378,377,1,0,0,0,379,380,1,
        0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,6,
        55,0,0,383,112,1,0,0,0,384,385,5,47,0,0,385,386,5,47,0,0,386,390,
        1,0,0,0,387,389,8,8,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,
        1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,390,1,0,0,0,393,394,
        6,56,0,0,394,114,1,0,0,0,395,399,5,35,0,0,396,398,8,8,0,0,397,396,
        1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,
        1,0,0,0,401,399,1,0,0,0,402,403,6,57,0,0,403,116,1,0,0,0,404,405,
        5,47,0,0,405,406,5,42,0,0,406,410,1,0,0,0,407,409,9,0,0,0,408,407,
        1,0,0,0,409,412,1,0,0,0,410,411,1,0,0,0,410,408,1,0,0,0,411,413,
        1,0,0,0,412,410,1,0,0,0,413,414,5,42,0,0,414,415,5,47,0,0,415,416,
        1,0,0,0,416,417,6,58,0,0,417,118,1,0,0,0,17,0,152,284,317,323,330,
        336,338,343,345,358,360,374,380,390,399,410,1,6,0,0
    ]

class transpilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    PAREN = 3
    LPAREN = 4
    RPAREN = 5
    LBRACK = 6
    RBRACK = 7
    LBRACE = 8
    RBRACE = 9
    SEMI = 10
    COMMA = 11
    QUESTION = 12
    ARROW = 13
    COLON = 14
    DOUBLE_COLON = 15
    INCLUDE = 16
    FUNC = 17
    METHOD = 18
    CLASS = 19
    INTERFACE = 20
    EXTENDS = 21
    IMPLEMENTS = 22
    CONST = 23
    LET = 24
    RETURN = 25
    FOR = 26
    WHILE = 27
    IF = 28
    ELSE = 29
    TRUE = 30
    FALSE = 31
    NULL = 32
    BREAK = 33
    CONTINUE = 34
    NOT = 35
    MUL = 36
    DIV = 37
    MOD = 38
    ADD = 39
    SUB = 40
    GT = 41
    LT = 42
    EQ = 43
    NEQ = 44
    GTE = 45
    LTE = 46
    AND = 47
    OR = 48
    ASSIGN = 49
    NUMBER = 50
    STRING = 51
    FSTRING = 52
    ID = 53
    WS = 54
    LINE_COMMENT = 55
    LINE_COMMENT2 = 56
    BLOCK_COMMENT = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'.'", "'()'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "';'", "','", "'?'", "':'", "'::'", "'include'", "'func'", "'method'", 
            "'class'", "'interface'", "'extends'", "'implements'", "'const'", 
            "'let'", "'return'", "'for'", "'while'", "'if'", "'else'", "'true'", 
            "'false'", "'null'", "'break'", "'continue'", "'*'", "'/'", 
            "'%'", "'+'", "'-'", "'>'", "'<'", "'=='", "'!='", "'>='", "'<='", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "PAREN", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", 
            "SEMI", "COMMA", "QUESTION", "ARROW", "COLON", "DOUBLE_COLON", 
            "INCLUDE", "FUNC", "METHOD", "CLASS", "INTERFACE", "EXTENDS", 
            "IMPLEMENTS", "CONST", "LET", "RETURN", "FOR", "WHILE", "IF", 
            "ELSE", "TRUE", "FALSE", "NULL", "BREAK", "CONTINUE", "NOT", 
            "MUL", "DIV", "MOD", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", 
            "GTE", "LTE", "AND", "OR", "ASSIGN", "NUMBER", "STRING", "FSTRING", 
            "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "PAREN", "LPAREN", "RPAREN", "LBRACK", 
                  "RBRACK", "LBRACE", "RBRACE", "SEMI", "COMMA", "QUESTION", 
                  "ARROW", "COLON", "DOUBLE_COLON", "INCLUDE", "FUNC", "METHOD", 
                  "CLASS", "INTERFACE", "EXTENDS", "IMPLEMENTS", "CONST", 
                  "LET", "RETURN", "FOR", "WHILE", "IF", "ELSE", "TRUE", 
                  "FALSE", "NULL", "BREAK", "CONTINUE", "NOT", "MUL", "DIV", 
                  "MOD", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", "GTE", "LTE", 
                  "AND", "OR", "ASSIGN", "NUMBER", "STRING", "FSTRING", 
                  "ESC", "SAFE_CHAR", "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", 
                  "BLOCK_COMMENT" ]

    grammarFileName = "transpiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


