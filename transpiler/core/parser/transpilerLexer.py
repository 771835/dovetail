# Generated from E:/python/minecraft-datapack-language/antlr/transpiler.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,59,429,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,157,8,12,1,13,1,13,1,
        14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
        31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,
        34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,36,1,36,1,36,1,36,3,36,296,8,36,1,37,1,37,1,38,1,38,1,39,1,
        39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,
        45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,
        48,329,8,48,1,49,1,49,1,49,1,49,3,49,335,8,49,1,50,1,50,1,51,4,51,
        340,8,51,11,51,12,51,341,1,51,1,51,4,51,346,8,51,11,51,12,51,347,
        3,51,350,8,51,1,52,1,52,1,52,5,52,355,8,52,10,52,12,52,358,9,52,
        1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,370,8,53,
        10,53,12,53,373,9,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,
        5,56,384,8,56,10,56,12,56,387,9,56,1,57,4,57,390,8,57,11,57,12,57,
        391,1,57,1,57,1,58,1,58,1,58,1,58,5,58,400,8,58,10,58,12,58,403,
        9,58,1,58,1,58,1,59,1,59,5,59,409,8,59,10,59,12,59,412,9,59,1,59,
        1,59,1,60,1,60,1,60,1,60,5,60,420,8,60,10,60,12,60,423,9,60,1,60,
        1,60,1,60,1,60,1,60,1,421,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,0,111,0,113,55,115,56,117,57,119,58,121,
        59,1,0,9,1,0,48,57,2,0,34,34,92,92,3,0,34,34,36,36,92,92,8,0,34,
        34,36,36,92,92,98,98,102,102,110,110,114,114,116,116,4,0,10,10,13,
        13,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,444,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
        0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,1,123,1,0,0,0,3,125,1,0,0,0,5,
        127,1,0,0,0,7,130,1,0,0,0,9,132,1,0,0,0,11,134,1,0,0,0,13,136,1,
        0,0,0,15,138,1,0,0,0,17,140,1,0,0,0,19,142,1,0,0,0,21,144,1,0,0,
        0,23,146,1,0,0,0,25,156,1,0,0,0,27,158,1,0,0,0,29,160,1,0,0,0,31,
        163,1,0,0,0,33,171,1,0,0,0,35,176,1,0,0,0,37,183,1,0,0,0,39,189,
        1,0,0,0,41,199,1,0,0,0,43,207,1,0,0,0,45,218,1,0,0,0,47,224,1,0,
        0,0,49,228,1,0,0,0,51,235,1,0,0,0,53,239,1,0,0,0,55,245,1,0,0,0,
        57,248,1,0,0,0,59,253,1,0,0,0,61,257,1,0,0,0,63,262,1,0,0,0,65,268,
        1,0,0,0,67,273,1,0,0,0,69,276,1,0,0,0,71,282,1,0,0,0,73,295,1,0,
        0,0,75,297,1,0,0,0,77,299,1,0,0,0,79,301,1,0,0,0,81,303,1,0,0,0,
        83,305,1,0,0,0,85,307,1,0,0,0,87,309,1,0,0,0,89,311,1,0,0,0,91,314,
        1,0,0,0,93,317,1,0,0,0,95,320,1,0,0,0,97,328,1,0,0,0,99,334,1,0,
        0,0,101,336,1,0,0,0,103,339,1,0,0,0,105,351,1,0,0,0,107,361,1,0,
        0,0,109,376,1,0,0,0,111,379,1,0,0,0,113,381,1,0,0,0,115,389,1,0,
        0,0,117,395,1,0,0,0,119,406,1,0,0,0,121,415,1,0,0,0,123,124,5,64,
        0,0,124,2,1,0,0,0,125,126,5,46,0,0,126,4,1,0,0,0,127,128,5,40,0,
        0,128,129,5,41,0,0,129,6,1,0,0,0,130,131,5,40,0,0,131,8,1,0,0,0,
        132,133,5,41,0,0,133,10,1,0,0,0,134,135,5,91,0,0,135,12,1,0,0,0,
        136,137,5,93,0,0,137,14,1,0,0,0,138,139,5,123,0,0,139,16,1,0,0,0,
        140,141,5,125,0,0,141,18,1,0,0,0,142,143,5,59,0,0,143,20,1,0,0,0,
        144,145,5,44,0,0,145,22,1,0,0,0,146,147,5,63,0,0,147,24,1,0,0,0,
        148,149,5,45,0,0,149,157,5,62,0,0,150,151,5,102,0,0,151,152,5,117,
        0,0,152,153,5,99,0,0,153,157,5,107,0,0,154,155,5,97,0,0,155,157,
        5,115,0,0,156,148,1,0,0,0,156,150,1,0,0,0,156,154,1,0,0,0,157,26,
        1,0,0,0,158,159,5,58,0,0,159,28,1,0,0,0,160,161,5,58,0,0,161,162,
        5,58,0,0,162,30,1,0,0,0,163,164,5,105,0,0,164,165,5,110,0,0,165,
        166,5,99,0,0,166,167,5,108,0,0,167,168,5,117,0,0,168,169,5,100,0,
        0,169,170,5,101,0,0,170,32,1,0,0,0,171,172,5,102,0,0,172,173,5,117,
        0,0,173,174,5,110,0,0,174,175,5,99,0,0,175,34,1,0,0,0,176,177,5,
        109,0,0,177,178,5,101,0,0,178,179,5,116,0,0,179,180,5,104,0,0,180,
        181,5,111,0,0,181,182,5,100,0,0,182,36,1,0,0,0,183,184,5,99,0,0,
        184,185,5,108,0,0,185,186,5,97,0,0,186,187,5,115,0,0,187,188,5,115,
        0,0,188,38,1,0,0,0,189,190,5,105,0,0,190,191,5,110,0,0,191,192,5,
        116,0,0,192,193,5,101,0,0,193,194,5,114,0,0,194,195,5,102,0,0,195,
        196,5,97,0,0,196,197,5,99,0,0,197,198,5,101,0,0,198,40,1,0,0,0,199,
        200,5,101,0,0,200,201,5,120,0,0,201,202,5,116,0,0,202,203,5,101,
        0,0,203,204,5,110,0,0,204,205,5,100,0,0,205,206,5,115,0,0,206,42,
        1,0,0,0,207,208,5,105,0,0,208,209,5,109,0,0,209,210,5,112,0,0,210,
        211,5,108,0,0,211,212,5,101,0,0,212,213,5,109,0,0,213,214,5,101,
        0,0,214,215,5,110,0,0,215,216,5,116,0,0,216,217,5,115,0,0,217,44,
        1,0,0,0,218,219,5,99,0,0,219,220,5,111,0,0,220,221,5,110,0,0,221,
        222,5,115,0,0,222,223,5,116,0,0,223,46,1,0,0,0,224,225,5,108,0,0,
        225,226,5,101,0,0,226,227,5,116,0,0,227,48,1,0,0,0,228,229,5,114,
        0,0,229,230,5,101,0,0,230,231,5,116,0,0,231,232,5,117,0,0,232,233,
        5,114,0,0,233,234,5,110,0,0,234,50,1,0,0,0,235,236,5,102,0,0,236,
        237,5,111,0,0,237,238,5,114,0,0,238,52,1,0,0,0,239,240,5,119,0,0,
        240,241,5,104,0,0,241,242,5,105,0,0,242,243,5,108,0,0,243,244,5,
        101,0,0,244,54,1,0,0,0,245,246,5,105,0,0,246,247,5,102,0,0,247,56,
        1,0,0,0,248,249,5,101,0,0,249,250,5,108,0,0,250,251,5,115,0,0,251,
        252,5,101,0,0,252,58,1,0,0,0,253,254,5,110,0,0,254,255,5,101,0,0,
        255,256,5,119,0,0,256,60,1,0,0,0,257,258,5,116,0,0,258,259,5,114,
        0,0,259,260,5,117,0,0,260,261,5,101,0,0,261,62,1,0,0,0,262,263,5,
        102,0,0,263,264,5,97,0,0,264,265,5,108,0,0,265,266,5,115,0,0,266,
        267,5,101,0,0,267,64,1,0,0,0,268,269,5,110,0,0,269,270,5,117,0,0,
        270,271,5,108,0,0,271,272,5,108,0,0,272,66,1,0,0,0,273,274,5,105,
        0,0,274,275,5,110,0,0,275,68,1,0,0,0,276,277,5,98,0,0,277,278,5,
        114,0,0,278,279,5,101,0,0,279,280,5,97,0,0,280,281,5,107,0,0,281,
        70,1,0,0,0,282,283,5,99,0,0,283,284,5,111,0,0,284,285,5,110,0,0,
        285,286,5,116,0,0,286,287,5,105,0,0,287,288,5,110,0,0,288,289,5,
        117,0,0,289,290,5,101,0,0,290,72,1,0,0,0,291,296,5,33,0,0,292,293,
        5,110,0,0,293,294,5,111,0,0,294,296,5,116,0,0,295,291,1,0,0,0,295,
        292,1,0,0,0,296,74,1,0,0,0,297,298,5,42,0,0,298,76,1,0,0,0,299,300,
        5,47,0,0,300,78,1,0,0,0,301,302,5,37,0,0,302,80,1,0,0,0,303,304,
        5,43,0,0,304,82,1,0,0,0,305,306,5,45,0,0,306,84,1,0,0,0,307,308,
        5,62,0,0,308,86,1,0,0,0,309,310,5,60,0,0,310,88,1,0,0,0,311,312,
        5,61,0,0,312,313,5,61,0,0,313,90,1,0,0,0,314,315,5,33,0,0,315,316,
        5,61,0,0,316,92,1,0,0,0,317,318,5,62,0,0,318,319,5,61,0,0,319,94,
        1,0,0,0,320,321,5,60,0,0,321,322,5,61,0,0,322,96,1,0,0,0,323,324,
        5,38,0,0,324,329,5,38,0,0,325,326,5,97,0,0,326,327,5,110,0,0,327,
        329,5,100,0,0,328,323,1,0,0,0,328,325,1,0,0,0,329,98,1,0,0,0,330,
        331,5,124,0,0,331,335,5,124,0,0,332,333,5,111,0,0,333,335,5,114,
        0,0,334,330,1,0,0,0,334,332,1,0,0,0,335,100,1,0,0,0,336,337,5,61,
        0,0,337,102,1,0,0,0,338,340,7,0,0,0,339,338,1,0,0,0,340,341,1,0,
        0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,349,1,0,0,0,343,345,5,46,
        0,0,344,346,7,0,0,0,345,344,1,0,0,0,346,347,1,0,0,0,347,345,1,0,
        0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,343,1,0,0,0,349,350,1,0,
        0,0,350,104,1,0,0,0,351,356,5,34,0,0,352,355,3,109,54,0,353,355,
        3,111,55,0,354,352,1,0,0,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,
        1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,360,
        5,34,0,0,360,106,1,0,0,0,361,362,5,102,0,0,362,363,5,34,0,0,363,
        371,1,0,0,0,364,365,5,92,0,0,365,370,7,1,0,0,366,370,8,2,0,0,367,
        368,5,36,0,0,368,370,5,123,0,0,369,364,1,0,0,0,369,366,1,0,0,0,369,
        367,1,0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,
        374,1,0,0,0,373,371,1,0,0,0,374,375,5,34,0,0,375,108,1,0,0,0,376,
        377,5,92,0,0,377,378,7,3,0,0,378,110,1,0,0,0,379,380,8,4,0,0,380,
        112,1,0,0,0,381,385,7,5,0,0,382,384,7,6,0,0,383,382,1,0,0,0,384,
        387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,114,1,0,0,0,387,
        385,1,0,0,0,388,390,7,7,0,0,389,388,1,0,0,0,390,391,1,0,0,0,391,
        389,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,6,57,0,0,394,
        116,1,0,0,0,395,396,5,47,0,0,396,397,5,47,0,0,397,401,1,0,0,0,398,
        400,8,8,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,
        402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,405,6,58,0,0,405,
        118,1,0,0,0,406,410,5,35,0,0,407,409,8,8,0,0,408,407,1,0,0,0,409,
        412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,
        410,1,0,0,0,413,414,6,59,0,0,414,120,1,0,0,0,415,416,5,47,0,0,416,
        417,5,42,0,0,417,421,1,0,0,0,418,420,9,0,0,0,419,418,1,0,0,0,420,
        423,1,0,0,0,421,422,1,0,0,0,421,419,1,0,0,0,422,424,1,0,0,0,423,
        421,1,0,0,0,424,425,5,42,0,0,425,426,5,47,0,0,426,427,1,0,0,0,427,
        428,6,60,0,0,428,122,1,0,0,0,17,0,156,295,328,334,341,347,349,354,
        356,369,371,385,391,401,410,421,1,6,0,0
    ]

class transpilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    PAREN = 3
    LPAREN = 4
    RPAREN = 5
    LBRACK = 6
    RBRACK = 7
    LBRACE = 8
    RBRACE = 9
    SEMI = 10
    COMMA = 11
    QUESTION = 12
    ARROW = 13
    COLON = 14
    DOUBLE_COLON = 15
    INCLUDE = 16
    FUNC = 17
    METHOD = 18
    CLASS = 19
    INTERFACE = 20
    EXTENDS = 21
    IMPLEMENTS = 22
    CONST = 23
    LET = 24
    RETURN = 25
    FOR = 26
    WHILE = 27
    IF = 28
    ELSE = 29
    NEW = 30
    TRUE = 31
    FALSE = 32
    NULL = 33
    IN = 34
    BREAK = 35
    CONTINUE = 36
    NOT = 37
    MUL = 38
    DIV = 39
    MOD = 40
    ADD = 41
    SUB = 42
    GT = 43
    LT = 44
    EQ = 45
    NEQ = 46
    GTE = 47
    LTE = 48
    AND = 49
    OR = 50
    ASSIGN = 51
    NUMBER = 52
    STRING = 53
    FSTRING = 54
    ID = 55
    WS = 56
    LINE_COMMENT = 57
    LINE_COMMENT2 = 58
    BLOCK_COMMENT = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'.'", "'()'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "';'", "','", "'?'", "':'", "'::'", "'include'", "'func'", "'method'", 
            "'class'", "'interface'", "'extends'", "'implements'", "'const'", 
            "'let'", "'return'", "'for'", "'while'", "'if'", "'else'", "'new'", 
            "'true'", "'false'", "'null'", "'in'", "'break'", "'continue'", 
            "'*'", "'/'", "'%'", "'+'", "'-'", "'>'", "'<'", "'=='", "'!='", 
            "'>='", "'<='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "PAREN", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", 
            "SEMI", "COMMA", "QUESTION", "ARROW", "COLON", "DOUBLE_COLON", 
            "INCLUDE", "FUNC", "METHOD", "CLASS", "INTERFACE", "EXTENDS", 
            "IMPLEMENTS", "CONST", "LET", "RETURN", "FOR", "WHILE", "IF", 
            "ELSE", "NEW", "TRUE", "FALSE", "NULL", "IN", "BREAK", "CONTINUE", 
            "NOT", "MUL", "DIV", "MOD", "ADD", "SUB", "GT", "LT", "EQ", 
            "NEQ", "GTE", "LTE", "AND", "OR", "ASSIGN", "NUMBER", "STRING", 
            "FSTRING", "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "PAREN", "LPAREN", "RPAREN", "LBRACK", 
                  "RBRACK", "LBRACE", "RBRACE", "SEMI", "COMMA", "QUESTION", 
                  "ARROW", "COLON", "DOUBLE_COLON", "INCLUDE", "FUNC", "METHOD", 
                  "CLASS", "INTERFACE", "EXTENDS", "IMPLEMENTS", "CONST", 
                  "LET", "RETURN", "FOR", "WHILE", "IF", "ELSE", "NEW", 
                  "TRUE", "FALSE", "NULL", "IN", "BREAK", "CONTINUE", "NOT", 
                  "MUL", "DIV", "MOD", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", 
                  "GTE", "LTE", "AND", "OR", "ASSIGN", "NUMBER", "STRING", 
                  "FSTRING", "ESC", "SAFE_CHAR", "ID", "WS", "LINE_COMMENT", 
                  "LINE_COMMENT2", "BLOCK_COMMENT" ]

    grammarFileName = "transpiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


