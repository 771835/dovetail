# Generated from E:/python/minecraft-datapack-language/antlr/transpiler.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,414,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
        148,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
        1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,314,8,45,
        1,46,1,46,1,46,1,46,3,46,320,8,46,1,47,1,47,1,48,4,48,325,8,48,11,
        48,12,48,326,1,48,1,48,4,48,331,8,48,11,48,12,48,332,3,48,335,8,
        48,1,49,1,49,1,49,5,49,340,8,49,10,49,12,49,343,9,49,1,49,1,49,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,355,8,50,10,50,12,50,
        358,9,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,5,53,369,8,
        53,10,53,12,53,372,9,53,1,54,4,54,375,8,54,11,54,12,54,376,1,54,
        1,54,1,55,1,55,1,55,1,55,5,55,385,8,55,10,55,12,55,388,9,55,1,55,
        1,55,1,56,1,56,5,56,394,8,56,10,56,12,56,397,9,56,1,56,1,56,1,57,
        1,57,1,57,1,57,5,57,405,8,57,10,57,12,57,408,9,57,1,57,1,57,1,57,
        1,57,1,57,1,406,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,0,105,0,
        107,52,109,53,111,54,113,55,115,56,1,0,9,1,0,48,57,2,0,34,34,92,
        92,3,0,34,34,36,36,92,92,8,0,34,34,36,36,92,92,98,98,102,102,110,
        110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,
        10,13,13,429,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,119,1,0,0,0,5,121,1,
        0,0,0,7,123,1,0,0,0,9,126,1,0,0,0,11,128,1,0,0,0,13,130,1,0,0,0,
        15,132,1,0,0,0,17,134,1,0,0,0,19,136,1,0,0,0,21,147,1,0,0,0,23,149,
        1,0,0,0,25,152,1,0,0,0,27,160,1,0,0,0,29,165,1,0,0,0,31,172,1,0,
        0,0,33,178,1,0,0,0,35,188,1,0,0,0,37,196,1,0,0,0,39,207,1,0,0,0,
        41,211,1,0,0,0,43,217,1,0,0,0,45,224,1,0,0,0,47,228,1,0,0,0,49,234,
        1,0,0,0,51,237,1,0,0,0,53,242,1,0,0,0,55,246,1,0,0,0,57,251,1,0,
        0,0,59,257,1,0,0,0,61,262,1,0,0,0,63,265,1,0,0,0,65,271,1,0,0,0,
        67,280,1,0,0,0,69,282,1,0,0,0,71,284,1,0,0,0,73,286,1,0,0,0,75,288,
        1,0,0,0,77,290,1,0,0,0,79,292,1,0,0,0,81,294,1,0,0,0,83,296,1,0,
        0,0,85,299,1,0,0,0,87,302,1,0,0,0,89,305,1,0,0,0,91,313,1,0,0,0,
        93,319,1,0,0,0,95,321,1,0,0,0,97,324,1,0,0,0,99,336,1,0,0,0,101,
        346,1,0,0,0,103,361,1,0,0,0,105,364,1,0,0,0,107,366,1,0,0,0,109,
        374,1,0,0,0,111,380,1,0,0,0,113,391,1,0,0,0,115,400,1,0,0,0,117,
        118,5,64,0,0,118,2,1,0,0,0,119,120,5,63,0,0,120,4,1,0,0,0,121,122,
        5,46,0,0,122,6,1,0,0,0,123,124,5,40,0,0,124,125,5,41,0,0,125,8,1,
        0,0,0,126,127,5,40,0,0,127,10,1,0,0,0,128,129,5,41,0,0,129,12,1,
        0,0,0,130,131,5,123,0,0,131,14,1,0,0,0,132,133,5,125,0,0,133,16,
        1,0,0,0,134,135,5,59,0,0,135,18,1,0,0,0,136,137,5,44,0,0,137,20,
        1,0,0,0,138,148,5,58,0,0,139,140,5,45,0,0,140,148,5,62,0,0,141,142,
        5,102,0,0,142,143,5,117,0,0,143,144,5,99,0,0,144,148,5,107,0,0,145,
        146,5,97,0,0,146,148,5,115,0,0,147,138,1,0,0,0,147,139,1,0,0,0,147,
        141,1,0,0,0,147,145,1,0,0,0,148,22,1,0,0,0,149,150,5,58,0,0,150,
        151,5,58,0,0,151,24,1,0,0,0,152,153,5,105,0,0,153,154,5,110,0,0,
        154,155,5,99,0,0,155,156,5,108,0,0,156,157,5,117,0,0,157,158,5,100,
        0,0,158,159,5,101,0,0,159,26,1,0,0,0,160,161,5,102,0,0,161,162,5,
        117,0,0,162,163,5,110,0,0,163,164,5,99,0,0,164,28,1,0,0,0,165,166,
        5,109,0,0,166,167,5,101,0,0,167,168,5,116,0,0,168,169,5,104,0,0,
        169,170,5,111,0,0,170,171,5,100,0,0,171,30,1,0,0,0,172,173,5,99,
        0,0,173,174,5,108,0,0,174,175,5,97,0,0,175,176,5,115,0,0,176,177,
        5,115,0,0,177,32,1,0,0,0,178,179,5,105,0,0,179,180,5,110,0,0,180,
        181,5,116,0,0,181,182,5,101,0,0,182,183,5,114,0,0,183,184,5,102,
        0,0,184,185,5,97,0,0,185,186,5,99,0,0,186,187,5,101,0,0,187,34,1,
        0,0,0,188,189,5,101,0,0,189,190,5,120,0,0,190,191,5,116,0,0,191,
        192,5,101,0,0,192,193,5,110,0,0,193,194,5,100,0,0,194,195,5,115,
        0,0,195,36,1,0,0,0,196,197,5,105,0,0,197,198,5,109,0,0,198,199,5,
        112,0,0,199,200,5,108,0,0,200,201,5,101,0,0,201,202,5,109,0,0,202,
        203,5,101,0,0,203,204,5,110,0,0,204,205,5,116,0,0,205,206,5,115,
        0,0,206,38,1,0,0,0,207,208,5,118,0,0,208,209,5,97,0,0,209,210,5,
        114,0,0,210,40,1,0,0,0,211,212,5,99,0,0,212,213,5,111,0,0,213,214,
        5,110,0,0,214,215,5,115,0,0,215,216,5,116,0,0,216,42,1,0,0,0,217,
        218,5,114,0,0,218,219,5,101,0,0,219,220,5,116,0,0,220,221,5,117,
        0,0,221,222,5,114,0,0,222,223,5,110,0,0,223,44,1,0,0,0,224,225,5,
        102,0,0,225,226,5,111,0,0,226,227,5,114,0,0,227,46,1,0,0,0,228,229,
        5,119,0,0,229,230,5,104,0,0,230,231,5,105,0,0,231,232,5,108,0,0,
        232,233,5,101,0,0,233,48,1,0,0,0,234,235,5,105,0,0,235,236,5,102,
        0,0,236,50,1,0,0,0,237,238,5,101,0,0,238,239,5,108,0,0,239,240,5,
        115,0,0,240,241,5,101,0,0,241,52,1,0,0,0,242,243,5,110,0,0,243,244,
        5,101,0,0,244,245,5,119,0,0,245,54,1,0,0,0,246,247,5,116,0,0,247,
        248,5,114,0,0,248,249,5,117,0,0,249,250,5,101,0,0,250,56,1,0,0,0,
        251,252,5,102,0,0,252,253,5,97,0,0,253,254,5,108,0,0,254,255,5,115,
        0,0,255,256,5,101,0,0,256,58,1,0,0,0,257,258,5,110,0,0,258,259,5,
        117,0,0,259,260,5,108,0,0,260,261,5,108,0,0,261,60,1,0,0,0,262,263,
        5,105,0,0,263,264,5,110,0,0,264,62,1,0,0,0,265,266,5,98,0,0,266,
        267,5,114,0,0,267,268,5,101,0,0,268,269,5,97,0,0,269,270,5,107,0,
        0,270,64,1,0,0,0,271,272,5,99,0,0,272,273,5,111,0,0,273,274,5,110,
        0,0,274,275,5,116,0,0,275,276,5,105,0,0,276,277,5,110,0,0,277,278,
        5,117,0,0,278,279,5,101,0,0,279,66,1,0,0,0,280,281,5,33,0,0,281,
        68,1,0,0,0,282,283,5,42,0,0,283,70,1,0,0,0,284,285,5,47,0,0,285,
        72,1,0,0,0,286,287,5,37,0,0,287,74,1,0,0,0,288,289,5,43,0,0,289,
        76,1,0,0,0,290,291,5,45,0,0,291,78,1,0,0,0,292,293,5,62,0,0,293,
        80,1,0,0,0,294,295,5,60,0,0,295,82,1,0,0,0,296,297,5,61,0,0,297,
        298,5,61,0,0,298,84,1,0,0,0,299,300,5,33,0,0,300,301,5,61,0,0,301,
        86,1,0,0,0,302,303,5,62,0,0,303,304,5,61,0,0,304,88,1,0,0,0,305,
        306,5,60,0,0,306,307,5,61,0,0,307,90,1,0,0,0,308,309,5,38,0,0,309,
        314,5,38,0,0,310,311,5,97,0,0,311,312,5,110,0,0,312,314,5,100,0,
        0,313,308,1,0,0,0,313,310,1,0,0,0,314,92,1,0,0,0,315,316,5,124,0,
        0,316,320,5,124,0,0,317,318,5,111,0,0,318,320,5,114,0,0,319,315,
        1,0,0,0,319,317,1,0,0,0,320,94,1,0,0,0,321,322,5,61,0,0,322,96,1,
        0,0,0,323,325,7,0,0,0,324,323,1,0,0,0,325,326,1,0,0,0,326,324,1,
        0,0,0,326,327,1,0,0,0,327,334,1,0,0,0,328,330,5,46,0,0,329,331,7,
        0,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,
        0,0,0,333,335,1,0,0,0,334,328,1,0,0,0,334,335,1,0,0,0,335,98,1,0,
        0,0,336,341,5,34,0,0,337,340,3,103,51,0,338,340,3,105,52,0,339,337,
        1,0,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,
        1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,5,34,0,0,345,100,
        1,0,0,0,346,347,5,102,0,0,347,348,5,34,0,0,348,356,1,0,0,0,349,350,
        5,92,0,0,350,355,7,1,0,0,351,355,8,2,0,0,352,353,5,36,0,0,353,355,
        5,123,0,0,354,349,1,0,0,0,354,351,1,0,0,0,354,352,1,0,0,0,355,358,
        1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,
        1,0,0,0,359,360,5,34,0,0,360,102,1,0,0,0,361,362,5,92,0,0,362,363,
        7,3,0,0,363,104,1,0,0,0,364,365,8,4,0,0,365,106,1,0,0,0,366,370,
        7,5,0,0,367,369,7,6,0,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,
        1,0,0,0,370,371,1,0,0,0,371,108,1,0,0,0,372,370,1,0,0,0,373,375,
        7,7,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,374,1,0,0,0,376,377,
        1,0,0,0,377,378,1,0,0,0,378,379,6,54,0,0,379,110,1,0,0,0,380,381,
        5,47,0,0,381,382,5,47,0,0,382,386,1,0,0,0,383,385,8,8,0,0,384,383,
        1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,
        1,0,0,0,388,386,1,0,0,0,389,390,6,55,0,0,390,112,1,0,0,0,391,395,
        5,35,0,0,392,394,8,8,0,0,393,392,1,0,0,0,394,397,1,0,0,0,395,393,
        1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,
        6,56,0,0,399,114,1,0,0,0,400,401,5,47,0,0,401,402,5,42,0,0,402,406,
        1,0,0,0,403,405,9,0,0,0,404,403,1,0,0,0,405,408,1,0,0,0,406,407,
        1,0,0,0,406,404,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,410,
        5,42,0,0,410,411,5,47,0,0,411,412,1,0,0,0,412,413,6,57,0,0,413,116,
        1,0,0,0,16,0,147,313,319,326,332,334,339,341,354,356,370,376,386,
        395,406,1,6,0,0
    ]

class transpilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    PAREN = 4
    LPAREN = 5
    RPAREN = 6
    LBRACE = 7
    RBRACE = 8
    SEMI = 9
    COMMA = 10
    ARROW = 11
    DOUBLE_COLON = 12
    INCLUDE = 13
    FUNC = 14
    METHOD = 15
    CLASS = 16
    INTERFACE = 17
    EXTENDS = 18
    IMPLEMENTS = 19
    VAR = 20
    CONST = 21
    RETURN = 22
    FOR = 23
    WHILE = 24
    IF = 25
    ELSE = 26
    NEW = 27
    TRUE = 28
    FALSE = 29
    NULL = 30
    IN = 31
    BREAK = 32
    CONTINUE = 33
    NOT = 34
    MUL = 35
    DIV = 36
    MOD = 37
    ADD = 38
    SUB = 39
    GT = 40
    LT = 41
    EQ = 42
    NEQ = 43
    GTE = 44
    LTE = 45
    AND = 46
    OR = 47
    ASSIGN = 48
    NUMBER = 49
    STRING = 50
    FSTRING = 51
    ID = 52
    WS = 53
    LINE_COMMENT = 54
    LINE_COMMENT2 = 55
    BLOCK_COMMENT = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'?'", "'.'", "'()'", "'('", "')'", "'{'", "'}'", "';'", 
            "','", "'::'", "'include'", "'func'", "'method'", "'class'", 
            "'interface'", "'extends'", "'implements'", "'var'", "'const'", 
            "'return'", "'for'", "'while'", "'if'", "'else'", "'new'", "'true'", 
            "'false'", "'null'", "'in'", "'break'", "'continue'", "'!'", 
            "'*'", "'/'", "'%'", "'+'", "'-'", "'>'", "'<'", "'=='", "'!='", 
            "'>='", "'<='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "PAREN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", 
            "ARROW", "DOUBLE_COLON", "INCLUDE", "FUNC", "METHOD", "CLASS", 
            "INTERFACE", "EXTENDS", "IMPLEMENTS", "VAR", "CONST", "RETURN", 
            "FOR", "WHILE", "IF", "ELSE", "NEW", "TRUE", "FALSE", "NULL", 
            "IN", "BREAK", "CONTINUE", "NOT", "MUL", "DIV", "MOD", "ADD", 
            "SUB", "GT", "LT", "EQ", "NEQ", "GTE", "LTE", "AND", "OR", "ASSIGN", 
            "NUMBER", "STRING", "FSTRING", "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", 
            "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "PAREN", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "SEMI", "COMMA", "ARROW", "DOUBLE_COLON", "INCLUDE", 
                  "FUNC", "METHOD", "CLASS", "INTERFACE", "EXTENDS", "IMPLEMENTS", 
                  "VAR", "CONST", "RETURN", "FOR", "WHILE", "IF", "ELSE", 
                  "NEW", "TRUE", "FALSE", "NULL", "IN", "BREAK", "CONTINUE", 
                  "NOT", "MUL", "DIV", "MOD", "ADD", "SUB", "GT", "LT", 
                  "EQ", "NEQ", "GTE", "LTE", "AND", "OR", "ASSIGN", "NUMBER", 
                  "STRING", "FSTRING", "ESC", "SAFE_CHAR", "ID", "WS", "LINE_COMMENT", 
                  "LINE_COMMENT2", "BLOCK_COMMENT" ]

    grammarFileName = "transpiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


