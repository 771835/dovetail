# Generated from E:/python/minecraft-datapack-language/antlr/transpiler.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,426,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,156,8,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
        30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
        33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
        35,1,35,3,35,293,8,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
        40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,
        45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,3,47,326,8,47,1,
        48,1,48,1,48,1,48,3,48,332,8,48,1,49,1,49,1,50,4,50,337,8,50,11,
        50,12,50,338,1,50,1,50,4,50,343,8,50,11,50,12,50,344,3,50,347,8,
        50,1,51,1,51,1,51,5,51,352,8,51,10,51,12,51,355,9,51,1,51,1,51,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,367,8,52,10,52,12,52,
        370,9,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,5,55,381,8,
        55,10,55,12,55,384,9,55,1,56,4,56,387,8,56,11,56,12,56,388,1,56,
        1,56,1,57,1,57,1,57,1,57,5,57,397,8,57,10,57,12,57,400,9,57,1,57,
        1,57,1,58,1,58,5,58,406,8,58,10,58,12,58,409,9,58,1,58,1,58,1,59,
        1,59,1,59,1,59,5,59,417,8,59,10,59,12,59,420,9,59,1,59,1,59,1,59,
        1,59,1,59,1,418,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,0,109,0,111,54,113,55,115,56,117,57,119,58,1,0,9,1,0,48,57,2,
        0,34,34,92,92,3,0,34,34,36,36,92,92,8,0,34,34,36,36,92,92,98,98,
        102,102,110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
        32,2,0,10,10,13,13,442,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
        0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,
        1,121,1,0,0,0,3,123,1,0,0,0,5,125,1,0,0,0,7,127,1,0,0,0,9,130,1,
        0,0,0,11,132,1,0,0,0,13,134,1,0,0,0,15,136,1,0,0,0,17,138,1,0,0,
        0,19,140,1,0,0,0,21,142,1,0,0,0,23,144,1,0,0,0,25,155,1,0,0,0,27,
        157,1,0,0,0,29,160,1,0,0,0,31,168,1,0,0,0,33,173,1,0,0,0,35,180,
        1,0,0,0,37,186,1,0,0,0,39,196,1,0,0,0,41,204,1,0,0,0,43,215,1,0,
        0,0,45,221,1,0,0,0,47,225,1,0,0,0,49,232,1,0,0,0,51,236,1,0,0,0,
        53,242,1,0,0,0,55,245,1,0,0,0,57,250,1,0,0,0,59,254,1,0,0,0,61,259,
        1,0,0,0,63,265,1,0,0,0,65,270,1,0,0,0,67,273,1,0,0,0,69,279,1,0,
        0,0,71,292,1,0,0,0,73,294,1,0,0,0,75,296,1,0,0,0,77,298,1,0,0,0,
        79,300,1,0,0,0,81,302,1,0,0,0,83,304,1,0,0,0,85,306,1,0,0,0,87,308,
        1,0,0,0,89,311,1,0,0,0,91,314,1,0,0,0,93,317,1,0,0,0,95,325,1,0,
        0,0,97,331,1,0,0,0,99,333,1,0,0,0,101,336,1,0,0,0,103,348,1,0,0,
        0,105,358,1,0,0,0,107,373,1,0,0,0,109,376,1,0,0,0,111,378,1,0,0,
        0,113,386,1,0,0,0,115,392,1,0,0,0,117,403,1,0,0,0,119,412,1,0,0,
        0,121,122,5,64,0,0,122,2,1,0,0,0,123,124,5,63,0,0,124,4,1,0,0,0,
        125,126,5,46,0,0,126,6,1,0,0,0,127,128,5,40,0,0,128,129,5,41,0,0,
        129,8,1,0,0,0,130,131,5,40,0,0,131,10,1,0,0,0,132,133,5,41,0,0,133,
        12,1,0,0,0,134,135,5,91,0,0,135,14,1,0,0,0,136,137,5,93,0,0,137,
        16,1,0,0,0,138,139,5,123,0,0,139,18,1,0,0,0,140,141,5,125,0,0,141,
        20,1,0,0,0,142,143,5,59,0,0,143,22,1,0,0,0,144,145,5,44,0,0,145,
        24,1,0,0,0,146,156,5,58,0,0,147,148,5,45,0,0,148,156,5,62,0,0,149,
        150,5,102,0,0,150,151,5,117,0,0,151,152,5,99,0,0,152,156,5,107,0,
        0,153,154,5,97,0,0,154,156,5,115,0,0,155,146,1,0,0,0,155,147,1,0,
        0,0,155,149,1,0,0,0,155,153,1,0,0,0,156,26,1,0,0,0,157,158,5,58,
        0,0,158,159,5,58,0,0,159,28,1,0,0,0,160,161,5,105,0,0,161,162,5,
        110,0,0,162,163,5,99,0,0,163,164,5,108,0,0,164,165,5,117,0,0,165,
        166,5,100,0,0,166,167,5,101,0,0,167,30,1,0,0,0,168,169,5,102,0,0,
        169,170,5,117,0,0,170,171,5,110,0,0,171,172,5,99,0,0,172,32,1,0,
        0,0,173,174,5,109,0,0,174,175,5,101,0,0,175,176,5,116,0,0,176,177,
        5,104,0,0,177,178,5,111,0,0,178,179,5,100,0,0,179,34,1,0,0,0,180,
        181,5,99,0,0,181,182,5,108,0,0,182,183,5,97,0,0,183,184,5,115,0,
        0,184,185,5,115,0,0,185,36,1,0,0,0,186,187,5,105,0,0,187,188,5,110,
        0,0,188,189,5,116,0,0,189,190,5,101,0,0,190,191,5,114,0,0,191,192,
        5,102,0,0,192,193,5,97,0,0,193,194,5,99,0,0,194,195,5,101,0,0,195,
        38,1,0,0,0,196,197,5,101,0,0,197,198,5,120,0,0,198,199,5,116,0,0,
        199,200,5,101,0,0,200,201,5,110,0,0,201,202,5,100,0,0,202,203,5,
        115,0,0,203,40,1,0,0,0,204,205,5,105,0,0,205,206,5,109,0,0,206,207,
        5,112,0,0,207,208,5,108,0,0,208,209,5,101,0,0,209,210,5,109,0,0,
        210,211,5,101,0,0,211,212,5,110,0,0,212,213,5,116,0,0,213,214,5,
        115,0,0,214,42,1,0,0,0,215,216,5,99,0,0,216,217,5,111,0,0,217,218,
        5,110,0,0,218,219,5,115,0,0,219,220,5,116,0,0,220,44,1,0,0,0,221,
        222,5,108,0,0,222,223,5,101,0,0,223,224,5,116,0,0,224,46,1,0,0,0,
        225,226,5,114,0,0,226,227,5,101,0,0,227,228,5,116,0,0,228,229,5,
        117,0,0,229,230,5,114,0,0,230,231,5,110,0,0,231,48,1,0,0,0,232,233,
        5,102,0,0,233,234,5,111,0,0,234,235,5,114,0,0,235,50,1,0,0,0,236,
        237,5,119,0,0,237,238,5,104,0,0,238,239,5,105,0,0,239,240,5,108,
        0,0,240,241,5,101,0,0,241,52,1,0,0,0,242,243,5,105,0,0,243,244,5,
        102,0,0,244,54,1,0,0,0,245,246,5,101,0,0,246,247,5,108,0,0,247,248,
        5,115,0,0,248,249,5,101,0,0,249,56,1,0,0,0,250,251,5,110,0,0,251,
        252,5,101,0,0,252,253,5,119,0,0,253,58,1,0,0,0,254,255,5,116,0,0,
        255,256,5,114,0,0,256,257,5,117,0,0,257,258,5,101,0,0,258,60,1,0,
        0,0,259,260,5,102,0,0,260,261,5,97,0,0,261,262,5,108,0,0,262,263,
        5,115,0,0,263,264,5,101,0,0,264,62,1,0,0,0,265,266,5,110,0,0,266,
        267,5,117,0,0,267,268,5,108,0,0,268,269,5,108,0,0,269,64,1,0,0,0,
        270,271,5,105,0,0,271,272,5,110,0,0,272,66,1,0,0,0,273,274,5,98,
        0,0,274,275,5,114,0,0,275,276,5,101,0,0,276,277,5,97,0,0,277,278,
        5,107,0,0,278,68,1,0,0,0,279,280,5,99,0,0,280,281,5,111,0,0,281,
        282,5,110,0,0,282,283,5,116,0,0,283,284,5,105,0,0,284,285,5,110,
        0,0,285,286,5,117,0,0,286,287,5,101,0,0,287,70,1,0,0,0,288,293,5,
        33,0,0,289,290,5,110,0,0,290,291,5,111,0,0,291,293,5,116,0,0,292,
        288,1,0,0,0,292,289,1,0,0,0,293,72,1,0,0,0,294,295,5,42,0,0,295,
        74,1,0,0,0,296,297,5,47,0,0,297,76,1,0,0,0,298,299,5,37,0,0,299,
        78,1,0,0,0,300,301,5,43,0,0,301,80,1,0,0,0,302,303,5,45,0,0,303,
        82,1,0,0,0,304,305,5,62,0,0,305,84,1,0,0,0,306,307,5,60,0,0,307,
        86,1,0,0,0,308,309,5,61,0,0,309,310,5,61,0,0,310,88,1,0,0,0,311,
        312,5,33,0,0,312,313,5,61,0,0,313,90,1,0,0,0,314,315,5,62,0,0,315,
        316,5,61,0,0,316,92,1,0,0,0,317,318,5,60,0,0,318,319,5,61,0,0,319,
        94,1,0,0,0,320,321,5,38,0,0,321,326,5,38,0,0,322,323,5,97,0,0,323,
        324,5,110,0,0,324,326,5,100,0,0,325,320,1,0,0,0,325,322,1,0,0,0,
        326,96,1,0,0,0,327,328,5,124,0,0,328,332,5,124,0,0,329,330,5,111,
        0,0,330,332,5,114,0,0,331,327,1,0,0,0,331,329,1,0,0,0,332,98,1,0,
        0,0,333,334,5,61,0,0,334,100,1,0,0,0,335,337,7,0,0,0,336,335,1,0,
        0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,346,1,0,
        0,0,340,342,5,46,0,0,341,343,7,0,0,0,342,341,1,0,0,0,343,344,1,0,
        0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,340,1,0,
        0,0,346,347,1,0,0,0,347,102,1,0,0,0,348,353,5,34,0,0,349,352,3,107,
        53,0,350,352,3,109,54,0,351,349,1,0,0,0,351,350,1,0,0,0,352,355,
        1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,
        1,0,0,0,356,357,5,34,0,0,357,104,1,0,0,0,358,359,5,102,0,0,359,360,
        5,34,0,0,360,368,1,0,0,0,361,362,5,92,0,0,362,367,7,1,0,0,363,367,
        8,2,0,0,364,365,5,36,0,0,365,367,5,123,0,0,366,361,1,0,0,0,366,363,
        1,0,0,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,
        1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,372,5,34,0,0,372,106,
        1,0,0,0,373,374,5,92,0,0,374,375,7,3,0,0,375,108,1,0,0,0,376,377,
        8,4,0,0,377,110,1,0,0,0,378,382,7,5,0,0,379,381,7,6,0,0,380,379,
        1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,112,
        1,0,0,0,384,382,1,0,0,0,385,387,7,7,0,0,386,385,1,0,0,0,387,388,
        1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,
        6,56,0,0,391,114,1,0,0,0,392,393,5,47,0,0,393,394,5,47,0,0,394,398,
        1,0,0,0,395,397,8,8,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,
        1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,
        6,57,0,0,402,116,1,0,0,0,403,407,5,35,0,0,404,406,8,8,0,0,405,404,
        1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,410,
        1,0,0,0,409,407,1,0,0,0,410,411,6,58,0,0,411,118,1,0,0,0,412,413,
        5,47,0,0,413,414,5,42,0,0,414,418,1,0,0,0,415,417,9,0,0,0,416,415,
        1,0,0,0,417,420,1,0,0,0,418,419,1,0,0,0,418,416,1,0,0,0,419,421,
        1,0,0,0,420,418,1,0,0,0,421,422,5,42,0,0,422,423,5,47,0,0,423,424,
        1,0,0,0,424,425,6,59,0,0,425,120,1,0,0,0,17,0,155,292,325,331,338,
        344,346,351,353,366,368,382,388,398,407,418,1,6,0,0
    ]

class transpilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    PAREN = 4
    LPAREN = 5
    RPAREN = 6
    LBRACK = 7
    RBRACK = 8
    LBRACE = 9
    RBRACE = 10
    SEMI = 11
    COMMA = 12
    ARROW = 13
    DOUBLE_COLON = 14
    INCLUDE = 15
    FUNC = 16
    METHOD = 17
    CLASS = 18
    INTERFACE = 19
    EXTENDS = 20
    IMPLEMENTS = 21
    CONST = 22
    LET = 23
    RETURN = 24
    FOR = 25
    WHILE = 26
    IF = 27
    ELSE = 28
    NEW = 29
    TRUE = 30
    FALSE = 31
    NULL = 32
    IN = 33
    BREAK = 34
    CONTINUE = 35
    NOT = 36
    MUL = 37
    DIV = 38
    MOD = 39
    ADD = 40
    SUB = 41
    GT = 42
    LT = 43
    EQ = 44
    NEQ = 45
    GTE = 46
    LTE = 47
    AND = 48
    OR = 49
    ASSIGN = 50
    NUMBER = 51
    STRING = 52
    FSTRING = 53
    ID = 54
    WS = 55
    LINE_COMMENT = 56
    LINE_COMMENT2 = 57
    BLOCK_COMMENT = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'?'", "'.'", "'()'", "'('", "')'", "'['", "']'", "'{'", 
            "'}'", "';'", "','", "'::'", "'include'", "'func'", "'method'", 
            "'class'", "'interface'", "'extends'", "'implements'", "'const'", 
            "'let'", "'return'", "'for'", "'while'", "'if'", "'else'", "'new'", 
            "'true'", "'false'", "'null'", "'in'", "'break'", "'continue'", 
            "'*'", "'/'", "'%'", "'+'", "'-'", "'>'", "'<'", "'=='", "'!='", 
            "'>='", "'<='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "PAREN", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", 
            "SEMI", "COMMA", "ARROW", "DOUBLE_COLON", "INCLUDE", "FUNC", 
            "METHOD", "CLASS", "INTERFACE", "EXTENDS", "IMPLEMENTS", "CONST", 
            "LET", "RETURN", "FOR", "WHILE", "IF", "ELSE", "NEW", "TRUE", 
            "FALSE", "NULL", "IN", "BREAK", "CONTINUE", "NOT", "MUL", "DIV", 
            "MOD", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", "GTE", "LTE", 
            "AND", "OR", "ASSIGN", "NUMBER", "STRING", "FSTRING", "ID", 
            "WS", "LINE_COMMENT", "LINE_COMMENT2", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "PAREN", "LPAREN", "RPAREN", "LBRACK", 
                  "RBRACK", "LBRACE", "RBRACE", "SEMI", "COMMA", "ARROW", 
                  "DOUBLE_COLON", "INCLUDE", "FUNC", "METHOD", "CLASS", 
                  "INTERFACE", "EXTENDS", "IMPLEMENTS", "CONST", "LET", 
                  "RETURN", "FOR", "WHILE", "IF", "ELSE", "NEW", "TRUE", 
                  "FALSE", "NULL", "IN", "BREAK", "CONTINUE", "NOT", "MUL", 
                  "DIV", "MOD", "ADD", "SUB", "GT", "LT", "EQ", "NEQ", "GTE", 
                  "LTE", "AND", "OR", "ASSIGN", "NUMBER", "STRING", "FSTRING", 
                  "ESC", "SAFE_CHAR", "ID", "WS", "LINE_COMMENT", "LINE_COMMENT2", 
                  "BLOCK_COMMENT" ]

    grammarFileName = "transpiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


